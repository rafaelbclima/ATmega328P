
Timer_Captura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000798  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c8  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ee  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b1  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_10>:

//Variáveis globais
uint32_t tempo_borda_subida, tempo_delta;

ISR(TIMER1_CAPT_vect) //interrupção por captura do valor do TC1
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	4f 93       	push	r20
  9c:	5f 93       	push	r21
  9e:	6f 93       	push	r22
  a0:	7f 93       	push	r23
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	af 93       	push	r26
  a8:	bf 93       	push	r27
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
	if(TCCR1B & (1<<ICES1))//lê o valor de contagem do TC1 na borda de subida do sinal
  ae:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  b2:	86 ff       	sbrs	r24, 6
  b4:	0f c0       	rjmp	.+30     	; 0xd4 <__vector_10+0x44>
		tempo_borda_subida = ICR1;//salva a primeira contagem para determinar a largura do pulso
  b6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ba:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tempo_borda_subida>
  c6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tempo_borda_subida+0x1>
  ca:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <tempo_borda_subida+0x2>
  ce:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <tempo_borda_subida+0x3>
  d2:	2a c0       	rjmp	.+84     	; 0x128 <__vector_10+0x98>
	else//lê o valor de contagem do TC1 na borda de descida do sinal
		tempo_delta = (ICR1 - tempo_borda_subida)*16; //cada incremento do TC1 corresponde a 16us
  d4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  d8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  dc:	a0 e0       	ldi	r26, 0x00	; 0
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <tempo_borda_subida>
  e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <tempo_borda_subida+0x1>
  e8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <tempo_borda_subida+0x2>
  ec:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <tempo_borda_subida+0x3>
  f0:	84 1b       	sub	r24, r20
  f2:	95 0b       	sbc	r25, r21
  f4:	a6 0b       	sbc	r26, r22
  f6:	b7 0b       	sbc	r27, r23
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	aa 1f       	adc	r26, r26
  fe:	bb 1f       	adc	r27, r27
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	aa 1f       	adc	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	aa 1f       	adc	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	aa 1f       	adc	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 124:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	TCCR1B ^= (1<<ICES1); //inverte a borda de captura
 128:	e1 e8       	ldi	r30, 0x81	; 129
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	89 27       	eor	r24, r25
 132:	80 83       	st	Z, r24
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <UART_Transmit>:

//Função para envio de um frame de 5 a 8bits
void UART_Transmit(uint8_t data)
{
	while(!( UCSR0A & (1<<UDRE0)));//Espera a limpeza do registr. de transmissão
 152:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 156:	95 ff       	sbrs	r25, 5
 158:	fc cf       	rjmp	.-8      	; 0x152 <UART_Transmit>
	UDR0 = data; //Coloca o dado no registrador e o envia
 15a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15e:	08 95       	ret

00000160 <main>:
}

int main(void)
{
	//Configura GPIO
	DDRB  &= 0b11111110;// Entrada no pino PB0 (Captura no PB0 (ICP1))
 160:	84 b1       	in	r24, 0x04	; 4
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0b00000001;// Pullups PB0 ativo
 166:	85 b1       	in	r24, 0x05	; 5
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	85 b9       	out	0x05, r24	; 5
	//Configura a UART
	UBRR0H = (uint8_t)(MYUBRR>>8); //Ajusta a taxa de transmissão
 16c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)MYUBRR;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Habilita o transmissor e o receptor
 176:	88 e1       	ldi	r24, 0x18	; 24
 178:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00); //Ajusta o formato do frame: 8 bits de dados e 2 de parada
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	//Configura Timer
	TCCR1B = (1<<ICES1)|(1<<CS12);//Captura na borda de subida, TC1 com prescaler = 256. Estouro a cada 256*(2^16)/16MHz = (2^16)*16us = 1,04s
 182:	84 e4       	ldi	r24, 0x44	; 68
 184:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = 1<<ICIE1;//habilita a interrupção por captura
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei(); //Habilita o flag de interrupções globais
 18e:	78 94       	sei

	while (1)
	{	
		UART_Transmit((uint8_t)(tempo_delta>>24));	
 190:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 194:	0e 94 a9 00 	call	0x152	; 0x152 <UART_Transmit>
		UART_Transmit((uint8_t)(tempo_delta>>16));	
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19c:	0e 94 a9 00 	call	0x152	; 0x152 <UART_Transmit>
		UART_Transmit((uint8_t)(tempo_delta>>8));	 
 1a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a4:	0e 94 a9 00 	call	0x152	; 0x152 <UART_Transmit>
		UART_Transmit((uint8_t)tempo_delta);		
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	0e 94 a9 00 	call	0x152	; 0x152 <UART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	83 ed       	ldi	r24, 0xD3	; 211
 1b4:	90 e3       	ldi	r25, 0x30	; 48
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x56>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x60>
 1c0:	00 00       	nop
 1c2:	e6 cf       	rjmp	.-52     	; 0x190 <main+0x30>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>

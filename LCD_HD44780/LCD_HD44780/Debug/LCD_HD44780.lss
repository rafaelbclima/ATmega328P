
LCD_HD44780.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000213c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000216c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001312  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b0  00000000  00000000  0000351e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ea2  00000000  00000000  00003cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00004b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000077c4  00000000  00000000  00004c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e1  00000000  00000000  0000c434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000c615  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002cd6  00000000  00000000  0000c685  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
       8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
       c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
      64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61
      74:	0e 94 40 00 	call	0x80	; 0x80 <main>
      78:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <_exit>

0000007c <__bad_interrupt>:
      7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "Resources\hd44780.h"

int main(void)
{
      80:	cf 93       	push	r28
      82:	df 93       	push	r29
      84:	cd b7       	in	r28, 0x3d	; 61
      86:	de b7       	in	r29, 0x3e	; 62
      88:	2e 97       	sbiw	r28, 0x0e	; 14
      8a:	0f b6       	in	r0, 0x3f	; 63
      8c:	f8 94       	cli
      8e:	de bf       	out	0x3e, r29	; 62
      90:	0f be       	out	0x3f, r0	; 63
      92:	cd bf       	out	0x3d, r28	; 61
  lcd_init();
      94:	0e 94 2b 0a 	call	0x1456	; 0x1456 <lcd_init>
  lcd_putchar('H');
      98:	88 e4       	ldi	r24, 0x48	; 72
      9a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <lcd_putchar>
  lcd_putchar('E');
      9e:	85 e4       	ldi	r24, 0x45	; 69
      a0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <lcd_putchar>
  lcd_putchar('L');
      a4:	8c e4       	ldi	r24, 0x4C	; 76
      a6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <lcd_putchar>
  lcd_putchar('L');
      aa:	8c e4       	ldi	r24, 0x4C	; 76
      ac:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <lcd_putchar>
  lcd_putchar('O');
      b0:	8f e4       	ldi	r24, 0x4F	; 79
      b2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <lcd_putchar>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	aa e7       	ldi	r26, 0x7A	; 122
      bc:	b4 e4       	ldi	r27, 0x44	; 68
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	9a 83       	std	Y+2, r25	; 0x02
      c2:	ab 83       	std	Y+3, r26	; 0x03
      c4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	4a e7       	ldi	r20, 0x7A	; 122
      cc:	53 e4       	ldi	r21, 0x43	; 67
      ce:	69 81       	ldd	r22, Y+1	; 0x01
      d0:	7a 81       	ldd	r23, Y+2	; 0x02
      d2:	8b 81       	ldd	r24, Y+3	; 0x03
      d4:	9c 81       	ldd	r25, Y+4	; 0x04
      d6:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
      da:	dc 01       	movw	r26, r24
      dc:	cb 01       	movw	r24, r22
      de:	8d 83       	std	Y+5, r24	; 0x05
      e0:	9e 83       	std	Y+6, r25	; 0x06
      e2:	af 83       	std	Y+7, r26	; 0x07
      e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	40 e8       	ldi	r20, 0x80	; 128
      ec:	5f e3       	ldi	r21, 0x3F	; 63
      ee:	6d 81       	ldd	r22, Y+5	; 0x05
      f0:	7e 81       	ldd	r23, Y+6	; 0x06
      f2:	8f 81       	ldd	r24, Y+7	; 0x07
      f4:	98 85       	ldd	r25, Y+8	; 0x08
      f6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
      fa:	88 23       	and	r24, r24
      fc:	2c f4       	brge	.+10     	; 0x108 <main+0x88>
		__ticks = 1;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	9a 87       	std	Y+10, r25	; 0x0a
     104:	89 87       	std	Y+9, r24	; 0x09
     106:	3f c0       	rjmp	.+126    	; 0x186 <main+0x106>
	else if (__tmp > 65535)
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	3f ef       	ldi	r19, 0xFF	; 255
     10c:	4f e7       	ldi	r20, 0x7F	; 127
     10e:	57 e4       	ldi	r21, 0x47	; 71
     110:	6d 81       	ldd	r22, Y+5	; 0x05
     112:	7e 81       	ldd	r23, Y+6	; 0x06
     114:	8f 81       	ldd	r24, Y+7	; 0x07
     116:	98 85       	ldd	r25, Y+8	; 0x08
     118:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     11c:	18 16       	cp	r1, r24
     11e:	4c f5       	brge	.+82     	; 0x172 <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e2       	ldi	r20, 0x20	; 32
     126:	51 e4       	ldi	r21, 0x41	; 65
     128:	69 81       	ldd	r22, Y+1	; 0x01
     12a:	7a 81       	ldd	r23, Y+2	; 0x02
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	9c 81       	ldd	r25, Y+4	; 0x04
     130:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     134:	dc 01       	movw	r26, r24
     136:	cb 01       	movw	r24, r22
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     140:	dc 01       	movw	r26, r24
     142:	cb 01       	movw	r24, r22
     144:	9a 87       	std	Y+10, r25	; 0x0a
     146:	89 87       	std	Y+9, r24	; 0x09
     148:	0f c0       	rjmp	.+30     	; 0x168 <main+0xe8>
     14a:	89 e1       	ldi	r24, 0x19	; 25
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9c 87       	std	Y+12, r25	; 0x0c
     150:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     152:	8b 85       	ldd	r24, Y+11	; 0x0b
     154:	9c 85       	ldd	r25, Y+12	; 0x0c
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <main+0xd6>
     15a:	9c 87       	std	Y+12, r25	; 0x0c
     15c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     15e:	89 85       	ldd	r24, Y+9	; 0x09
     160:	9a 85       	ldd	r25, Y+10	; 0x0a
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	9a 87       	std	Y+10, r25	; 0x0a
     166:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     168:	89 85       	ldd	r24, Y+9	; 0x09
     16a:	9a 85       	ldd	r25, Y+10	; 0x0a
     16c:	89 2b       	or	r24, r25
     16e:	69 f7       	brne	.-38     	; 0x14a <main+0xca>
     170:	14 c0       	rjmp	.+40     	; 0x19a <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     172:	6d 81       	ldd	r22, Y+5	; 0x05
     174:	7e 81       	ldd	r23, Y+6	; 0x06
     176:	8f 81       	ldd	r24, Y+7	; 0x07
     178:	98 85       	ldd	r25, Y+8	; 0x08
     17a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	9a 87       	std	Y+10, r25	; 0x0a
     184:	89 87       	std	Y+9, r24	; 0x09
     186:	89 85       	ldd	r24, Y+9	; 0x09
     188:	9a 85       	ldd	r25, Y+10	; 0x0a
     18a:	9e 87       	std	Y+14, r25	; 0x0e
     18c:	8d 87       	std	Y+13, r24	; 0x0d
     18e:	8d 85       	ldd	r24, Y+13	; 0x0d
     190:	9e 85       	ldd	r25, Y+14	; 0x0e
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <main+0x112>
     196:	9e 87       	std	Y+14, r25	; 0x0e
     198:	8d 87       	std	Y+13, r24	; 0x0d
  _delay_ms(1000);

  return 0;
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
}
     19e:	2e 96       	adiw	r28, 0x0e	; 14
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <hd44780_outnibble>:
/*
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	a2 97       	sbiw	r28, 0x22	; 34
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	89 a3       	std	Y+33, r24	; 0x21
     1c6:	6a a3       	std	Y+34, r22	; 0x22
  CLR(PORT, HD44780_RW);
     1c8:	8b e2       	ldi	r24, 0x2B	; 43
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	2b e2       	ldi	r18, 0x2B	; 43
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	f9 01       	movw	r30, r18
     1d2:	20 81       	ld	r18, Z
     1d4:	2f 7e       	andi	r18, 0xEF	; 239
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
  if (rs)
     1da:	8a a1       	ldd	r24, Y+34	; 0x22
     1dc:	88 23       	and	r24, r24
     1de:	51 f0       	breq	.+20     	; 0x1f4 <hd44780_outnibble+0x44>
    SET(PORT, HD44780_RS);
     1e0:	8b e2       	ldi	r24, 0x2B	; 43
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	2b e2       	ldi	r18, 0x2B	; 43
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	20 64       	ori	r18, 0x40	; 64
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
     1f2:	09 c0       	rjmp	.+18     	; 0x206 <hd44780_outnibble+0x56>
  else
    CLR(PORT, HD44780_RS);
     1f4:	8b e2       	ldi	r24, 0x2B	; 43
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	2b e2       	ldi	r18, 0x2B	; 43
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	20 81       	ld	r18, Z
     200:	2f 7b       	andi	r18, 0xBF	; 191
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
  ASSIGN(PORT, HD44780_D4, n);
     206:	8b e2       	ldi	r24, 0x2B	; 43
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	2b e2       	ldi	r18, 0x2B	; 43
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	f9 01       	movw	r30, r18
     210:	20 81       	ld	r18, Z
     212:	32 2f       	mov	r19, r18
     214:	30 7f       	andi	r19, 0xF0	; 240
     216:	29 a1       	ldd	r18, Y+33	; 0x21
     218:	23 2b       	or	r18, r19
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
  SET(PORT, HD44780_E);
     21e:	8b e2       	ldi	r24, 0x2B	; 43
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	2b e2       	ldi	r18, 0x2B	; 43
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	f9 01       	movw	r30, r18
     228:	20 81       	ld	r18, Z
     22a:	20 62       	ori	r18, 0x20	; 32
     22c:	fc 01       	movw	r30, r24
     22e:	20 83       	st	Z, r18
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	bf e3       	ldi	r27, 0x3F	; 63
     238:	89 83       	std	Y+1, r24	; 0x01
     23a:	9a 83       	std	Y+2, r25	; 0x02
     23c:	ab 83       	std	Y+3, r26	; 0x03
     23e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     240:	2b ea       	ldi	r18, 0xAB	; 171
     242:	3a ea       	ldi	r19, 0xAA	; 170
     244:	4a ea       	ldi	r20, 0xAA	; 170
     246:	5e e3       	ldi	r21, 0x3E	; 62
     248:	69 81       	ldd	r22, Y+1	; 0x01
     24a:	7a 81       	ldd	r23, Y+2	; 0x02
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	9c 81       	ldd	r25, Y+4	; 0x04
     250:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	8d 83       	std	Y+5, r24	; 0x05
     25a:	9e 83       	std	Y+6, r25	; 0x06
     25c:	af 83       	std	Y+7, r26	; 0x07
     25e:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 e8       	ldi	r20, 0x80	; 128
     266:	5e e3       	ldi	r21, 0x3E	; 62
     268:	69 81       	ldd	r22, Y+1	; 0x01
     26a:	7a 81       	ldd	r23, Y+2	; 0x02
     26c:	8b 81       	ldd	r24, Y+3	; 0x03
     26e:	9c 81       	ldd	r25, Y+4	; 0x04
     270:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	89 87       	std	Y+9, r24	; 0x09
     27a:	9a 87       	std	Y+10, r25	; 0x0a
     27c:	ab 87       	std	Y+11, r26	; 0x0b
     27e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e8       	ldi	r20, 0x80	; 128
     286:	5f e3       	ldi	r21, 0x3F	; 63
     288:	6d 81       	ldd	r22, Y+5	; 0x05
     28a:	7e 81       	ldd	r23, Y+6	; 0x06
     28c:	8f 81       	ldd	r24, Y+7	; 0x07
     28e:	98 85       	ldd	r25, Y+8	; 0x08
     290:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     294:	88 23       	and	r24, r24
     296:	1c f4       	brge	.+6      	; 0x29e <hd44780_outnibble+0xee>
		__ticks = 1;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8d 87       	std	Y+13, r24	; 0x0d
     29c:	b2 c0       	rjmp	.+356    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	else if (__tmp2 > 65535)
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	3f ef       	ldi	r19, 0xFF	; 255
     2a2:	4f e7       	ldi	r20, 0x7F	; 127
     2a4:	57 e4       	ldi	r21, 0x47	; 71
     2a6:	69 85       	ldd	r22, Y+9	; 0x09
     2a8:	7a 85       	ldd	r23, Y+10	; 0x0a
     2aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ac:	9c 85       	ldd	r25, Y+12	; 0x0c
     2ae:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     2b2:	18 16       	cp	r1, r24
     2b4:	0c f0       	brlt	.+2      	; 0x2b8 <hd44780_outnibble+0x108>
     2b6:	7b c0       	rjmp	.+246    	; 0x3ae <hd44780_outnibble+0x1fe>
	{
		_delay_ms(__us / 1000.0);
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	4a e7       	ldi	r20, 0x7A	; 122
     2be:	54 e4       	ldi	r21, 0x44	; 68
     2c0:	69 81       	ldd	r22, Y+1	; 0x01
     2c2:	7a 81       	ldd	r23, Y+2	; 0x02
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
     2cc:	dc 01       	movw	r26, r24
     2ce:	cb 01       	movw	r24, r22
     2d0:	8e 87       	std	Y+14, r24	; 0x0e
     2d2:	9f 87       	std	Y+15, r25	; 0x0f
     2d4:	a8 8b       	std	Y+16, r26	; 0x10
     2d6:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	4a e7       	ldi	r20, 0x7A	; 122
     2de:	53 e4       	ldi	r21, 0x43	; 67
     2e0:	6e 85       	ldd	r22, Y+14	; 0x0e
     2e2:	7f 85       	ldd	r23, Y+15	; 0x0f
     2e4:	88 89       	ldd	r24, Y+16	; 0x10
     2e6:	99 89       	ldd	r25, Y+17	; 0x11
     2e8:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	8a 8b       	std	Y+18, r24	; 0x12
     2f2:	9b 8b       	std	Y+19, r25	; 0x13
     2f4:	ac 8b       	std	Y+20, r26	; 0x14
     2f6:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e8       	ldi	r20, 0x80	; 128
     2fe:	5f e3       	ldi	r21, 0x3F	; 63
     300:	6a 89       	ldd	r22, Y+18	; 0x12
     302:	7b 89       	ldd	r23, Y+19	; 0x13
     304:	8c 89       	ldd	r24, Y+20	; 0x14
     306:	9d 89       	ldd	r25, Y+21	; 0x15
     308:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     30c:	88 23       	and	r24, r24
     30e:	2c f4       	brge	.+10     	; 0x31a <hd44780_outnibble+0x16a>
		__ticks = 1;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	9f 8b       	std	Y+23, r25	; 0x17
     316:	8e 8b       	std	Y+22, r24	; 0x16
     318:	3f c0       	rjmp	.+126    	; 0x398 <hd44780_outnibble+0x1e8>
	else if (__tmp > 65535)
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	3f ef       	ldi	r19, 0xFF	; 255
     31e:	4f e7       	ldi	r20, 0x7F	; 127
     320:	57 e4       	ldi	r21, 0x47	; 71
     322:	6a 89       	ldd	r22, Y+18	; 0x12
     324:	7b 89       	ldd	r23, Y+19	; 0x13
     326:	8c 89       	ldd	r24, Y+20	; 0x14
     328:	9d 89       	ldd	r25, Y+21	; 0x15
     32a:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     32e:	18 16       	cp	r1, r24
     330:	4c f5       	brge	.+82     	; 0x384 <hd44780_outnibble+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e2       	ldi	r20, 0x20	; 32
     338:	51 e4       	ldi	r21, 0x41	; 65
     33a:	6e 85       	ldd	r22, Y+14	; 0x0e
     33c:	7f 85       	ldd	r23, Y+15	; 0x0f
     33e:	88 89       	ldd	r24, Y+16	; 0x10
     340:	99 89       	ldd	r25, Y+17	; 0x11
     342:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	bc 01       	movw	r22, r24
     34c:	cd 01       	movw	r24, r26
     34e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	9f 8b       	std	Y+23, r25	; 0x17
     358:	8e 8b       	std	Y+22, r24	; 0x16
     35a:	0f c0       	rjmp	.+30     	; 0x37a <hd44780_outnibble+0x1ca>
     35c:	89 e1       	ldi	r24, 0x19	; 25
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	99 8f       	std	Y+25, r25	; 0x19
     362:	88 8f       	std	Y+24, r24	; 0x18
     364:	88 8d       	ldd	r24, Y+24	; 0x18
     366:	99 8d       	ldd	r25, Y+25	; 0x19
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <hd44780_outnibble+0x1b8>
     36c:	99 8f       	std	Y+25, r25	; 0x19
     36e:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     370:	8e 89       	ldd	r24, Y+22	; 0x16
     372:	9f 89       	ldd	r25, Y+23	; 0x17
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	9f 8b       	std	Y+23, r25	; 0x17
     378:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     37a:	8e 89       	ldd	r24, Y+22	; 0x16
     37c:	9f 89       	ldd	r25, Y+23	; 0x17
     37e:	89 2b       	or	r24, r25
     380:	69 f7       	brne	.-38     	; 0x35c <hd44780_outnibble+0x1ac>
     382:	3f c0       	rjmp	.+126    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     384:	6a 89       	ldd	r22, Y+18	; 0x12
     386:	7b 89       	ldd	r23, Y+19	; 0x13
     388:	8c 89       	ldd	r24, Y+20	; 0x14
     38a:	9d 89       	ldd	r25, Y+21	; 0x15
     38c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     390:	dc 01       	movw	r26, r24
     392:	cb 01       	movw	r24, r22
     394:	9f 8b       	std	Y+23, r25	; 0x17
     396:	8e 8b       	std	Y+22, r24	; 0x16
     398:	8e 89       	ldd	r24, Y+22	; 0x16
     39a:	9f 89       	ldd	r25, Y+23	; 0x17
     39c:	9b 8f       	std	Y+27, r25	; 0x1b
     39e:	8a 8f       	std	Y+26, r24	; 0x1a
     3a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3a4:	01 97       	sbiw	r24, 0x01	; 1
     3a6:	f1 f7       	brne	.-4      	; 0x3a4 <hd44780_outnibble+0x1f4>
     3a8:	9b 8f       	std	Y+27, r25	; 0x1b
     3aa:	8a 8f       	std	Y+26, r24	; 0x1a
     3ac:	2a c0       	rjmp	.+84     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	4f e7       	ldi	r20, 0x7F	; 127
     3b4:	53 e4       	ldi	r21, 0x43	; 67
     3b6:	6d 81       	ldd	r22, Y+5	; 0x05
     3b8:	7e 81       	ldd	r23, Y+6	; 0x06
     3ba:	8f 81       	ldd	r24, Y+7	; 0x07
     3bc:	98 85       	ldd	r25, Y+8	; 0x08
     3be:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     3c2:	18 16       	cp	r1, r24
     3c4:	ac f4       	brge	.+42     	; 0x3f0 <hd44780_outnibble+0x240>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     3c6:	69 85       	ldd	r22, Y+9	; 0x09
     3c8:	7a 85       	ldd	r23, Y+10	; 0x0a
     3ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     3cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ce:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     3d2:	dc 01       	movw	r26, r24
     3d4:	cb 01       	movw	r24, r22
     3d6:	9d 8f       	std	Y+29, r25	; 0x1d
     3d8:	8c 8f       	std	Y+28, r24	; 0x1c
     3da:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     3de:	9f 8f       	std	Y+31, r25	; 0x1f
     3e0:	8e 8f       	std	Y+30, r24	; 0x1e
     3e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <hd44780_outnibble+0x236>
     3ea:	9f 8f       	std	Y+31, r25	; 0x1f
     3ec:	8e 8f       	std	Y+30, r24	; 0x1e
     3ee:	0f c0       	rjmp	.+30     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3f0:	6d 81       	ldd	r22, Y+5	; 0x05
     3f2:	7e 81       	ldd	r23, Y+6	; 0x06
     3f4:	8f 81       	ldd	r24, Y+7	; 0x07
     3f6:	98 85       	ldd	r25, Y+8	; 0x08
     3f8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	8d 87       	std	Y+13, r24	; 0x0d
     402:	8d 85       	ldd	r24, Y+13	; 0x0d
     404:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     406:	88 a1       	ldd	r24, Y+32	; 0x20
     408:	8a 95       	dec	r24
     40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     40c:	88 a3       	std	Y+32, r24	; 0x20
  _delay_us(0.5);
  CLR(PORT, HD44780_E);
     40e:	8b e2       	ldi	r24, 0x2B	; 43
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	2b e2       	ldi	r18, 0x2B	; 43
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	2f 7d       	andi	r18, 0xDF	; 223
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
}
     420:	00 00       	nop
     422:	a2 96       	adiw	r28, 0x22	; 34
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	00 d0       	rcall	.+0      	; 0x43a <hd44780_outbyte+0x6>
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	89 83       	std	Y+1, r24	; 0x01
     440:	6a 83       	std	Y+2, r22	; 0x02
  hd44780_outnibble(b >> 4, rs);
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	82 95       	swap	r24
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	6a 81       	ldd	r22, Y+2	; 0x02
     44a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	6a 81       	ldd	r22, Y+2	; 0x02
     454:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <hd44780_outnibble>
}
     458:	00 00       	nop
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <hd44780_init>:
 * This is the only area where timed waits are really needed as
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	ca 5a       	subi	r28, 0xAA	; 170
     472:	d1 09       	sbc	r29, r1
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
  SET(DDR, HD44780_RS);
     47e:	8a e2       	ldi	r24, 0x2A	; 42
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	2a e2       	ldi	r18, 0x2A	; 42
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	f9 01       	movw	r30, r18
     488:	20 81       	ld	r18, Z
     48a:	20 64       	ori	r18, 0x40	; 64
     48c:	fc 01       	movw	r30, r24
     48e:	20 83       	st	Z, r18
  SET(DDR, HD44780_RW);
     490:	8a e2       	ldi	r24, 0x2A	; 42
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	2a e2       	ldi	r18, 0x2A	; 42
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	f9 01       	movw	r30, r18
     49a:	20 81       	ld	r18, Z
     49c:	20 61       	ori	r18, 0x10	; 16
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
  SET(DDR, HD44780_E);
     4a2:	8a e2       	ldi	r24, 0x2A	; 42
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	2a e2       	ldi	r18, 0x2A	; 42
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	20 62       	ori	r18, 0x20	; 32
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x0F);
     4b4:	8a e2       	ldi	r24, 0x2A	; 42
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	2a e2       	ldi	r18, 0x2A	; 42
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	2f 60       	ori	r18, 0x0F	; 15
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	a0 e7       	ldi	r26, 0x70	; 112
     4cc:	b1 e4       	ldi	r27, 0x41	; 65
     4ce:	89 83       	std	Y+1, r24	; 0x01
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	ab 83       	std	Y+3, r26	; 0x03
     4d4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4d6:	8e 01       	movw	r16, r28
     4d8:	0f 55       	subi	r16, 0x5F	; 95
     4da:	1f 4f       	sbci	r17, 0xFF	; 255
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	4a e7       	ldi	r20, 0x7A	; 122
     4e2:	53 e4       	ldi	r21, 0x43	; 67
     4e4:	69 81       	ldd	r22, Y+1	; 0x01
     4e6:	7a 81       	ldd	r23, Y+2	; 0x02
     4e8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ea:	9c 81       	ldd	r25, Y+4	; 0x04
     4ec:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	f8 01       	movw	r30, r16
     4f6:	80 83       	st	Z, r24
     4f8:	91 83       	std	Z+1, r25	; 0x01
     4fa:	a2 83       	std	Z+2, r26	; 0x02
     4fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4fe:	ce 01       	movw	r24, r28
     500:	8f 55       	subi	r24, 0x5F	; 95
     502:	9f 4f       	sbci	r25, 0xFF	; 255
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e8       	ldi	r20, 0x80	; 128
     50a:	5f e3       	ldi	r21, 0x3F	; 63
     50c:	fc 01       	movw	r30, r24
     50e:	60 81       	ld	r22, Z
     510:	71 81       	ldd	r23, Z+1	; 0x01
     512:	82 81       	ldd	r24, Z+2	; 0x02
     514:	93 81       	ldd	r25, Z+3	; 0x03
     516:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     51a:	88 23       	and	r24, r24
     51c:	4c f4       	brge	.+18     	; 0x530 <hd44780_init+0xcc>
		__ticks = 1;
     51e:	ce 01       	movw	r24, r28
     520:	8b 55       	subi	r24, 0x5B	; 91
     522:	9f 4f       	sbci	r25, 0xFF	; 255
     524:	21 e0       	ldi	r18, 0x01	; 1
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	fc 01       	movw	r30, r24
     52a:	31 83       	std	Z+1, r19	; 0x01
     52c:	20 83       	st	Z, r18
     52e:	69 c0       	rjmp	.+210    	; 0x602 <hd44780_init+0x19e>
	else if (__tmp > 65535)
     530:	ce 01       	movw	r24, r28
     532:	8f 55       	subi	r24, 0x5F	; 95
     534:	9f 4f       	sbci	r25, 0xFF	; 255
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	3f ef       	ldi	r19, 0xFF	; 255
     53a:	4f e7       	ldi	r20, 0x7F	; 127
     53c:	57 e4       	ldi	r21, 0x47	; 71
     53e:	fc 01       	movw	r30, r24
     540:	60 81       	ld	r22, Z
     542:	71 81       	ldd	r23, Z+1	; 0x01
     544:	82 81       	ldd	r24, Z+2	; 0x02
     546:	93 81       	ldd	r25, Z+3	; 0x03
     548:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     54c:	18 16       	cp	r1, r24
     54e:	0c f0       	brlt	.+2      	; 0x552 <hd44780_init+0xee>
     550:	46 c0       	rjmp	.+140    	; 0x5de <hd44780_init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e2       	ldi	r20, 0x20	; 32
     558:	51 e4       	ldi	r21, 0x41	; 65
     55a:	69 81       	ldd	r22, Y+1	; 0x01
     55c:	7a 81       	ldd	r23, Y+2	; 0x02
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	9c 81       	ldd	r25, Y+4	; 0x04
     562:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	8e 01       	movw	r16, r28
     56c:	0b 55       	subi	r16, 0x5B	; 91
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	bc 01       	movw	r22, r24
     572:	cd 01       	movw	r24, r26
     574:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	f8 01       	movw	r30, r16
     57e:	91 83       	std	Z+1, r25	; 0x01
     580:	80 83       	st	Z, r24
     582:	24 c0       	rjmp	.+72     	; 0x5cc <hd44780_init+0x168>
     584:	ce 01       	movw	r24, r28
     586:	89 55       	subi	r24, 0x59	; 89
     588:	9f 4f       	sbci	r25, 0xFF	; 255
     58a:	29 e1       	ldi	r18, 0x19	; 25
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	fc 01       	movw	r30, r24
     590:	31 83       	std	Z+1, r19	; 0x01
     592:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     594:	ce 01       	movw	r24, r28
     596:	89 55       	subi	r24, 0x59	; 89
     598:	9f 4f       	sbci	r25, 0xFF	; 255
     59a:	fc 01       	movw	r30, r24
     59c:	80 81       	ld	r24, Z
     59e:	91 81       	ldd	r25, Z+1	; 0x01
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <hd44780_init+0x13c>
     5a4:	9e 01       	movw	r18, r28
     5a6:	29 55       	subi	r18, 0x59	; 89
     5a8:	3f 4f       	sbci	r19, 0xFF	; 255
     5aa:	f9 01       	movw	r30, r18
     5ac:	91 83       	std	Z+1, r25	; 0x01
     5ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b0:	ce 01       	movw	r24, r28
     5b2:	8b 55       	subi	r24, 0x5B	; 91
     5b4:	9f 4f       	sbci	r25, 0xFF	; 255
     5b6:	9e 01       	movw	r18, r28
     5b8:	2b 55       	subi	r18, 0x5B	; 91
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	31 81       	ldd	r19, Z+1	; 0x01
     5c2:	21 50       	subi	r18, 0x01	; 1
     5c4:	31 09       	sbc	r19, r1
     5c6:	fc 01       	movw	r30, r24
     5c8:	31 83       	std	Z+1, r19	; 0x01
     5ca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5cc:	ce 01       	movw	r24, r28
     5ce:	8b 55       	subi	r24, 0x5B	; 91
     5d0:	9f 4f       	sbci	r25, 0xFF	; 255
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	91 81       	ldd	r25, Z+1	; 0x01
     5d8:	89 2b       	or	r24, r25
     5da:	a1 f6       	brne	.-88     	; 0x584 <hd44780_init+0x120>
     5dc:	2c c0       	rjmp	.+88     	; 0x636 <hd44780_init+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5de:	8e 01       	movw	r16, r28
     5e0:	0b 55       	subi	r16, 0x5B	; 91
     5e2:	1f 4f       	sbci	r17, 0xFF	; 255
     5e4:	ce 01       	movw	r24, r28
     5e6:	8f 55       	subi	r24, 0x5F	; 95
     5e8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ea:	fc 01       	movw	r30, r24
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
     5f4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	f8 01       	movw	r30, r16
     5fe:	91 83       	std	Z+1, r25	; 0x01
     600:	80 83       	st	Z, r24
     602:	ce 01       	movw	r24, r28
     604:	87 55       	subi	r24, 0x57	; 87
     606:	9f 4f       	sbci	r25, 0xFF	; 255
     608:	9e 01       	movw	r18, r28
     60a:	2b 55       	subi	r18, 0x5B	; 91
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	31 81       	ldd	r19, Z+1	; 0x01
     614:	fc 01       	movw	r30, r24
     616:	31 83       	std	Z+1, r19	; 0x01
     618:	20 83       	st	Z, r18
     61a:	ce 01       	movw	r24, r28
     61c:	87 55       	subi	r24, 0x57	; 87
     61e:	9f 4f       	sbci	r25, 0xFF	; 255
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
     624:	91 81       	ldd	r25, Z+1	; 0x01
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <hd44780_init+0x1c2>
     62a:	9e 01       	movw	r18, r28
     62c:	27 55       	subi	r18, 0x57	; 87
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	f9 01       	movw	r30, r18
     632:	91 83       	std	Z+1, r25	; 0x01
     634:	80 83       	st	Z, r24

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <hd44780_outnibble>
     63e:	83 e3       	ldi	r24, 0x33	; 51
     640:	93 e3       	ldi	r25, 0x33	; 51
     642:	a3 e8       	ldi	r26, 0x83	; 131
     644:	b0 e4       	ldi	r27, 0x40	; 64
     646:	8d 83       	std	Y+5, r24	; 0x05
     648:	9e 83       	std	Y+6, r25	; 0x06
     64a:	af 83       	std	Y+7, r26	; 0x07
     64c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     64e:	8e 01       	movw	r16, r28
     650:	09 56       	subi	r16, 0x69	; 105
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	4a e7       	ldi	r20, 0x7A	; 122
     65a:	53 e4       	ldi	r21, 0x43	; 67
     65c:	6d 81       	ldd	r22, Y+5	; 0x05
     65e:	7e 81       	ldd	r23, Y+6	; 0x06
     660:	8f 81       	ldd	r24, Y+7	; 0x07
     662:	98 85       	ldd	r25, Y+8	; 0x08
     664:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	f8 01       	movw	r30, r16
     66e:	80 83       	st	Z, r24
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	a2 83       	std	Z+2, r26	; 0x02
     674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     676:	ce 01       	movw	r24, r28
     678:	89 56       	subi	r24, 0x69	; 105
     67a:	9f 4f       	sbci	r25, 0xFF	; 255
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e8       	ldi	r20, 0x80	; 128
     682:	5f e3       	ldi	r21, 0x3F	; 63
     684:	fc 01       	movw	r30, r24
     686:	60 81       	ld	r22, Z
     688:	71 81       	ldd	r23, Z+1	; 0x01
     68a:	82 81       	ldd	r24, Z+2	; 0x02
     68c:	93 81       	ldd	r25, Z+3	; 0x03
     68e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     692:	88 23       	and	r24, r24
     694:	4c f4       	brge	.+18     	; 0x6a8 <hd44780_init+0x244>
		__ticks = 1;
     696:	ce 01       	movw	r24, r28
     698:	85 56       	subi	r24, 0x65	; 101
     69a:	9f 4f       	sbci	r25, 0xFF	; 255
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	fc 01       	movw	r30, r24
     6a2:	31 83       	std	Z+1, r19	; 0x01
     6a4:	20 83       	st	Z, r18
     6a6:	69 c0       	rjmp	.+210    	; 0x77a <hd44780_init+0x316>
	else if (__tmp > 65535)
     6a8:	ce 01       	movw	r24, r28
     6aa:	89 56       	subi	r24, 0x69	; 105
     6ac:	9f 4f       	sbci	r25, 0xFF	; 255
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	3f ef       	ldi	r19, 0xFF	; 255
     6b2:	4f e7       	ldi	r20, 0x7F	; 127
     6b4:	57 e4       	ldi	r21, 0x47	; 71
     6b6:	fc 01       	movw	r30, r24
     6b8:	60 81       	ld	r22, Z
     6ba:	71 81       	ldd	r23, Z+1	; 0x01
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	0c f0       	brlt	.+2      	; 0x6ca <hd44780_init+0x266>
     6c8:	46 c0       	rjmp	.+140    	; 0x756 <hd44780_init+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e2       	ldi	r20, 0x20	; 32
     6d0:	51 e4       	ldi	r21, 0x41	; 65
     6d2:	6d 81       	ldd	r22, Y+5	; 0x05
     6d4:	7e 81       	ldd	r23, Y+6	; 0x06
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	98 85       	ldd	r25, Y+8	; 0x08
     6da:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	8e 01       	movw	r16, r28
     6e4:	05 56       	subi	r16, 0x65	; 101
     6e6:	1f 4f       	sbci	r17, 0xFF	; 255
     6e8:	bc 01       	movw	r22, r24
     6ea:	cd 01       	movw	r24, r26
     6ec:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	f8 01       	movw	r30, r16
     6f6:	91 83       	std	Z+1, r25	; 0x01
     6f8:	80 83       	st	Z, r24
     6fa:	24 c0       	rjmp	.+72     	; 0x744 <hd44780_init+0x2e0>
     6fc:	ce 01       	movw	r24, r28
     6fe:	83 56       	subi	r24, 0x63	; 99
     700:	9f 4f       	sbci	r25, 0xFF	; 255
     702:	29 e1       	ldi	r18, 0x19	; 25
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	20 83       	st	Z, r18
     70c:	ce 01       	movw	r24, r28
     70e:	83 56       	subi	r24, 0x63	; 99
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	fc 01       	movw	r30, r24
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <hd44780_init+0x2b4>
     71c:	9e 01       	movw	r18, r28
     71e:	23 56       	subi	r18, 0x63	; 99
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	f9 01       	movw	r30, r18
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     728:	ce 01       	movw	r24, r28
     72a:	85 56       	subi	r24, 0x65	; 101
     72c:	9f 4f       	sbci	r25, 0xFF	; 255
     72e:	9e 01       	movw	r18, r28
     730:	25 56       	subi	r18, 0x65	; 101
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	31 81       	ldd	r19, Z+1	; 0x01
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	31 09       	sbc	r19, r1
     73e:	fc 01       	movw	r30, r24
     740:	31 83       	std	Z+1, r19	; 0x01
     742:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     744:	ce 01       	movw	r24, r28
     746:	85 56       	subi	r24, 0x65	; 101
     748:	9f 4f       	sbci	r25, 0xFF	; 255
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	89 2b       	or	r24, r25
     752:	a1 f6       	brne	.-88     	; 0x6fc <hd44780_init+0x298>
     754:	2c c0       	rjmp	.+88     	; 0x7ae <hd44780_init+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     756:	8e 01       	movw	r16, r28
     758:	05 56       	subi	r16, 0x65	; 101
     75a:	1f 4f       	sbci	r17, 0xFF	; 255
     75c:	ce 01       	movw	r24, r28
     75e:	89 56       	subi	r24, 0x69	; 105
     760:	9f 4f       	sbci	r25, 0xFF	; 255
     762:	fc 01       	movw	r30, r24
     764:	60 81       	ld	r22, Z
     766:	71 81       	ldd	r23, Z+1	; 0x01
     768:	82 81       	ldd	r24, Z+2	; 0x02
     76a:	93 81       	ldd	r25, Z+3	; 0x03
     76c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	f8 01       	movw	r30, r16
     776:	91 83       	std	Z+1, r25	; 0x01
     778:	80 83       	st	Z, r24
     77a:	ce 01       	movw	r24, r28
     77c:	81 56       	subi	r24, 0x61	; 97
     77e:	9f 4f       	sbci	r25, 0xFF	; 255
     780:	9e 01       	movw	r18, r28
     782:	25 56       	subi	r18, 0x65	; 101
     784:	3f 4f       	sbci	r19, 0xFF	; 255
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	31 81       	ldd	r19, Z+1	; 0x01
     78c:	fc 01       	movw	r30, r24
     78e:	31 83       	std	Z+1, r19	; 0x01
     790:	20 83       	st	Z, r18
     792:	ce 01       	movw	r24, r28
     794:	81 56       	subi	r24, 0x61	; 97
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	fc 01       	movw	r30, r24
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <hd44780_init+0x33a>
     7a2:	9e 01       	movw	r18, r28
     7a4:	21 56       	subi	r18, 0x61	; 97
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	f9 01       	movw	r30, r18
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	80 83       	st	Z, r24
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <hd44780_outnibble>
     7b6:	8d ec       	ldi	r24, 0xCD	; 205
     7b8:	9c ec       	ldi	r25, 0xCC	; 204
     7ba:	ac ec       	ldi	r26, 0xCC	; 204
     7bc:	bd e3       	ldi	r27, 0x3D	; 61
     7be:	89 87       	std	Y+9, r24	; 0x09
     7c0:	9a 87       	std	Y+10, r25	; 0x0a
     7c2:	ab 87       	std	Y+11, r26	; 0x0b
     7c4:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c6:	8e 01       	movw	r16, r28
     7c8:	03 57       	subi	r16, 0x73	; 115
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	4a e7       	ldi	r20, 0x7A	; 122
     7d2:	53 e4       	ldi	r21, 0x43	; 67
     7d4:	69 85       	ldd	r22, Y+9	; 0x09
     7d6:	7a 85       	ldd	r23, Y+10	; 0x0a
     7d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7da:	9c 85       	ldd	r25, Y+12	; 0x0c
     7dc:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 83       	st	Z, r24
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	a2 83       	std	Z+2, r26	; 0x02
     7ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7ee:	ce 01       	movw	r24, r28
     7f0:	83 57       	subi	r24, 0x73	; 115
     7f2:	9f 4f       	sbci	r25, 0xFF	; 255
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e8       	ldi	r20, 0x80	; 128
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	fc 01       	movw	r30, r24
     7fe:	60 81       	ld	r22, Z
     800:	71 81       	ldd	r23, Z+1	; 0x01
     802:	82 81       	ldd	r24, Z+2	; 0x02
     804:	93 81       	ldd	r25, Z+3	; 0x03
     806:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     80a:	88 23       	and	r24, r24
     80c:	4c f4       	brge	.+18     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		__ticks = 1;
     80e:	ce 01       	movw	r24, r28
     810:	8f 56       	subi	r24, 0x6F	; 111
     812:	9f 4f       	sbci	r25, 0xFF	; 255
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	fc 01       	movw	r30, r24
     81a:	31 83       	std	Z+1, r19	; 0x01
     81c:	20 83       	st	Z, r18
     81e:	69 c0       	rjmp	.+210    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
	else if (__tmp > 65535)
     820:	ce 01       	movw	r24, r28
     822:	83 57       	subi	r24, 0x73	; 115
     824:	9f 4f       	sbci	r25, 0xFF	; 255
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	3f ef       	ldi	r19, 0xFF	; 255
     82a:	4f e7       	ldi	r20, 0x7F	; 127
     82c:	57 e4       	ldi	r21, 0x47	; 71
     82e:	fc 01       	movw	r30, r24
     830:	60 81       	ld	r22, Z
     832:	71 81       	ldd	r23, Z+1	; 0x01
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	93 81       	ldd	r25, Z+3	; 0x03
     838:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     83c:	18 16       	cp	r1, r24
     83e:	0c f0       	brlt	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     840:	46 c0       	rjmp	.+140    	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e2       	ldi	r20, 0x20	; 32
     848:	51 e4       	ldi	r21, 0x41	; 65
     84a:	69 85       	ldd	r22, Y+9	; 0x09
     84c:	7a 85       	ldd	r23, Y+10	; 0x0a
     84e:	8b 85       	ldd	r24, Y+11	; 0x0b
     850:	9c 85       	ldd	r25, Y+12	; 0x0c
     852:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	8e 01       	movw	r16, r28
     85c:	0f 56       	subi	r16, 0x6F	; 111
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
     860:	bc 01       	movw	r22, r24
     862:	cd 01       	movw	r24, r26
     864:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	f8 01       	movw	r30, r16
     86e:	91 83       	std	Z+1, r25	; 0x01
     870:	80 83       	st	Z, r24
     872:	24 c0       	rjmp	.+72     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
     874:	ce 01       	movw	r24, r28
     876:	8d 56       	subi	r24, 0x6D	; 109
     878:	9f 4f       	sbci	r25, 0xFF	; 255
     87a:	29 e1       	ldi	r18, 0x19	; 25
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	fc 01       	movw	r30, r24
     880:	31 83       	std	Z+1, r19	; 0x01
     882:	20 83       	st	Z, r18
     884:	ce 01       	movw	r24, r28
     886:	8d 56       	subi	r24, 0x6D	; 109
     888:	9f 4f       	sbci	r25, 0xFF	; 255
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
     894:	9e 01       	movw	r18, r28
     896:	2d 56       	subi	r18, 0x6D	; 109
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	f9 01       	movw	r30, r18
     89c:	91 83       	std	Z+1, r25	; 0x01
     89e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a0:	ce 01       	movw	r24, r28
     8a2:	8f 56       	subi	r24, 0x6F	; 111
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	9e 01       	movw	r18, r28
     8a8:	2f 56       	subi	r18, 0x6F	; 111
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	f9 01       	movw	r30, r18
     8ae:	20 81       	ld	r18, Z
     8b0:	31 81       	ldd	r19, Z+1	; 0x01
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	31 09       	sbc	r19, r1
     8b6:	fc 01       	movw	r30, r24
     8b8:	31 83       	std	Z+1, r19	; 0x01
     8ba:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8bc:	ce 01       	movw	r24, r28
     8be:	8f 56       	subi	r24, 0x6F	; 111
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	fc 01       	movw	r30, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	89 2b       	or	r24, r25
     8ca:	a1 f6       	brne	.-88     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     8cc:	2c c0       	rjmp	.+88     	; 0x926 <__stack+0x27>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ce:	8e 01       	movw	r16, r28
     8d0:	0f 56       	subi	r16, 0x6F	; 111
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	ce 01       	movw	r24, r28
     8d6:	83 57       	subi	r24, 0x73	; 115
     8d8:	9f 4f       	sbci	r25, 0xFF	; 255
     8da:	fc 01       	movw	r30, r24
     8dc:	60 81       	ld	r22, Z
     8de:	71 81       	ldd	r23, Z+1	; 0x01
     8e0:	82 81       	ldd	r24, Z+2	; 0x02
     8e2:	93 81       	ldd	r25, Z+3	; 0x03
     8e4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	f8 01       	movw	r30, r16
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
     8f2:	ce 01       	movw	r24, r28
     8f4:	8b 56       	subi	r24, 0x6B	; 107
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	9e 01       	movw	r18, r28
     8fa:	2f 56       	subi	r18, 0x6F	; 111
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	f9 01       	movw	r30, r18
     900:	20 81       	ld	r18, Z
     902:	31 81       	ldd	r19, Z+1	; 0x01
     904:	fc 01       	movw	r30, r24
     906:	31 83       	std	Z+1, r19	; 0x01
     908:	20 83       	st	Z, r18
     90a:	ce 01       	movw	r24, r28
     90c:	8b 56       	subi	r24, 0x6B	; 107
     90e:	9f 4f       	sbci	r25, 0xFF	; 255
     910:	fc 01       	movw	r30, r24
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <__stack+0x17>
     91a:	9e 01       	movw	r18, r28
     91c:	2b 56       	subi	r18, 0x6B	; 107
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	f9 01       	movw	r30, r18
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	80 83       	st	Z, r24
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	83 e0       	ldi	r24, 0x03	; 3
     92a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <hd44780_outnibble>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a4 e1       	ldi	r26, 0x14	; 20
     934:	b2 e4       	ldi	r27, 0x42	; 66
     936:	8d 87       	std	Y+13, r24	; 0x0d
     938:	9e 87       	std	Y+14, r25	; 0x0e
     93a:	af 87       	std	Y+15, r26	; 0x0f
     93c:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     93e:	8e 01       	movw	r16, r28
     940:	0f 58       	subi	r16, 0x8F	; 143
     942:	1f 4f       	sbci	r17, 0xFF	; 255
     944:	2b ea       	ldi	r18, 0xAB	; 171
     946:	3a ea       	ldi	r19, 0xAA	; 170
     948:	4a ea       	ldi	r20, 0xAA	; 170
     94a:	5e e3       	ldi	r21, 0x3E	; 62
     94c:	6d 85       	ldd	r22, Y+13	; 0x0d
     94e:	7e 85       	ldd	r23, Y+14	; 0x0e
     950:	8f 85       	ldd	r24, Y+15	; 0x0f
     952:	98 89       	ldd	r25, Y+16	; 0x10
     954:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	f8 01       	movw	r30, r16
     95e:	80 83       	st	Z, r24
     960:	91 83       	std	Z+1, r25	; 0x01
     962:	a2 83       	std	Z+2, r26	; 0x02
     964:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     966:	8e 01       	movw	r16, r28
     968:	0b 58       	subi	r16, 0x8B	; 139
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 e8       	ldi	r20, 0x80	; 128
     972:	5e e3       	ldi	r21, 0x3E	; 62
     974:	6d 85       	ldd	r22, Y+13	; 0x0d
     976:	7e 85       	ldd	r23, Y+14	; 0x0e
     978:	8f 85       	ldd	r24, Y+15	; 0x0f
     97a:	98 89       	ldd	r25, Y+16	; 0x10
     97c:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	f8 01       	movw	r30, r16
     986:	80 83       	st	Z, r24
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	a2 83       	std	Z+2, r26	; 0x02
     98c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     98e:	ce 01       	movw	r24, r28
     990:	8f 58       	subi	r24, 0x8F	; 143
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e8       	ldi	r20, 0x80	; 128
     99a:	5f e3       	ldi	r21, 0x3F	; 63
     99c:	fc 01       	movw	r30, r24
     99e:	60 81       	ld	r22, Z
     9a0:	71 81       	ldd	r23, Z+1	; 0x01
     9a2:	82 81       	ldd	r24, Z+2	; 0x02
     9a4:	93 81       	ldd	r25, Z+3	; 0x03
     9a6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     9aa:	88 23       	and	r24, r24
     9ac:	3c f4       	brge	.+14     	; 0x9bc <__stack+0xbd>
		__ticks = 1;
     9ae:	ce 01       	movw	r24, r28
     9b0:	87 58       	subi	r24, 0x87	; 135
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
     9ba:	2c c1       	rjmp	.+600    	; 0xc14 <__stack+0x315>
	else if (__tmp2 > 65535)
     9bc:	ce 01       	movw	r24, r28
     9be:	8b 58       	subi	r24, 0x8B	; 139
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	3f ef       	ldi	r19, 0xFF	; 255
     9c6:	4f e7       	ldi	r20, 0x7F	; 127
     9c8:	57 e4       	ldi	r21, 0x47	; 71
     9ca:	fc 01       	movw	r30, r24
     9cc:	60 81       	ld	r22, Z
     9ce:	71 81       	ldd	r23, Z+1	; 0x01
     9d0:	82 81       	ldd	r24, Z+2	; 0x02
     9d2:	93 81       	ldd	r25, Z+3	; 0x03
     9d4:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     9d8:	18 16       	cp	r1, r24
     9da:	0c f0       	brlt	.+2      	; 0x9de <__stack+0xdf>
     9dc:	cd c0       	rjmp	.+410    	; 0xb78 <__stack+0x279>
	{
		_delay_ms(__us / 1000.0);
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	4a e7       	ldi	r20, 0x7A	; 122
     9e4:	54 e4       	ldi	r21, 0x44	; 68
     9e6:	6d 85       	ldd	r22, Y+13	; 0x0d
     9e8:	7e 85       	ldd	r23, Y+14	; 0x0e
     9ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ec:	98 89       	ldd	r25, Y+16	; 0x10
     9ee:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	9e 01       	movw	r18, r28
     9f8:	26 58       	subi	r18, 0x86	; 134
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	f9 01       	movw	r30, r18
     9fe:	80 83       	st	Z, r24
     a00:	91 83       	std	Z+1, r25	; 0x01
     a02:	a2 83       	std	Z+2, r26	; 0x02
     a04:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a06:	8e 01       	movw	r16, r28
     a08:	02 58       	subi	r16, 0x82	; 130
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	ce 01       	movw	r24, r28
     a0e:	86 58       	subi	r24, 0x86	; 134
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	4a e7       	ldi	r20, 0x7A	; 122
     a18:	53 e4       	ldi	r21, 0x43	; 67
     a1a:	fc 01       	movw	r30, r24
     a1c:	60 81       	ld	r22, Z
     a1e:	71 81       	ldd	r23, Z+1	; 0x01
     a20:	82 81       	ldd	r24, Z+2	; 0x02
     a22:	93 81       	ldd	r25, Z+3	; 0x03
     a24:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	f8 01       	movw	r30, r16
     a2e:	80 83       	st	Z, r24
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	a2 83       	std	Z+2, r26	; 0x02
     a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a36:	ce 01       	movw	r24, r28
     a38:	82 58       	subi	r24, 0x82	; 130
     a3a:	9f 4f       	sbci	r25, 0xFF	; 255
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e8       	ldi	r20, 0x80	; 128
     a42:	5f e3       	ldi	r21, 0x3F	; 63
     a44:	fc 01       	movw	r30, r24
     a46:	60 81       	ld	r22, Z
     a48:	71 81       	ldd	r23, Z+1	; 0x01
     a4a:	82 81       	ldd	r24, Z+2	; 0x02
     a4c:	93 81       	ldd	r25, Z+3	; 0x03
     a4e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     a52:	88 23       	and	r24, r24
     a54:	4c f4       	brge	.+18     	; 0xa68 <__stack+0x169>
		__ticks = 1;
     a56:	ce 01       	movw	r24, r28
     a58:	8e 57       	subi	r24, 0x7E	; 126
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	21 e0       	ldi	r18, 0x01	; 1
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	fc 01       	movw	r30, r24
     a62:	31 83       	std	Z+1, r19	; 0x01
     a64:	20 83       	st	Z, r18
     a66:	6d c0       	rjmp	.+218    	; 0xb42 <__stack+0x243>
	else if (__tmp > 65535)
     a68:	ce 01       	movw	r24, r28
     a6a:	82 58       	subi	r24, 0x82	; 130
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	3f ef       	ldi	r19, 0xFF	; 255
     a72:	4f e7       	ldi	r20, 0x7F	; 127
     a74:	57 e4       	ldi	r21, 0x47	; 71
     a76:	fc 01       	movw	r30, r24
     a78:	60 81       	ld	r22, Z
     a7a:	71 81       	ldd	r23, Z+1	; 0x01
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	93 81       	ldd	r25, Z+3	; 0x03
     a80:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     a84:	18 16       	cp	r1, r24
     a86:	0c f0       	brlt	.+2      	; 0xa8a <__stack+0x18b>
     a88:	4a c0       	rjmp	.+148    	; 0xb1e <__stack+0x21f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a8a:	ce 01       	movw	r24, r28
     a8c:	86 58       	subi	r24, 0x86	; 134
     a8e:	9f 4f       	sbci	r25, 0xFF	; 255
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	fc 01       	movw	r30, r24
     a9a:	60 81       	ld	r22, Z
     a9c:	71 81       	ldd	r23, Z+1	; 0x01
     a9e:	82 81       	ldd	r24, Z+2	; 0x02
     aa0:	93 81       	ldd	r25, Z+3	; 0x03
     aa2:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     aa6:	dc 01       	movw	r26, r24
     aa8:	cb 01       	movw	r24, r22
     aaa:	8e 01       	movw	r16, r28
     aac:	0e 57       	subi	r16, 0x7E	; 126
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	bc 01       	movw	r22, r24
     ab2:	cd 01       	movw	r24, r26
     ab4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	f8 01       	movw	r30, r16
     abe:	91 83       	std	Z+1, r25	; 0x01
     ac0:	80 83       	st	Z, r24
     ac2:	24 c0       	rjmp	.+72     	; 0xb0c <__stack+0x20d>
     ac4:	ce 01       	movw	r24, r28
     ac6:	8c 57       	subi	r24, 0x7C	; 124
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	29 e1       	ldi	r18, 0x19	; 25
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	31 83       	std	Z+1, r19	; 0x01
     ad2:	20 83       	st	Z, r18
     ad4:	ce 01       	movw	r24, r28
     ad6:	8c 57       	subi	r24, 0x7C	; 124
     ad8:	9f 4f       	sbci	r25, 0xFF	; 255
     ada:	fc 01       	movw	r30, r24
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <__stack+0x1e1>
     ae4:	9e 01       	movw	r18, r28
     ae6:	2c 57       	subi	r18, 0x7C	; 124
     ae8:	3f 4f       	sbci	r19, 0xFF	; 255
     aea:	f9 01       	movw	r30, r18
     aec:	91 83       	std	Z+1, r25	; 0x01
     aee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af0:	ce 01       	movw	r24, r28
     af2:	8e 57       	subi	r24, 0x7E	; 126
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	9e 01       	movw	r18, r28
     af8:	2e 57       	subi	r18, 0x7E	; 126
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	31 81       	ldd	r19, Z+1	; 0x01
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	31 09       	sbc	r19, r1
     b06:	fc 01       	movw	r30, r24
     b08:	31 83       	std	Z+1, r19	; 0x01
     b0a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b0c:	ce 01       	movw	r24, r28
     b0e:	8e 57       	subi	r24, 0x7E	; 126
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	fc 01       	movw	r30, r24
     b14:	80 81       	ld	r24, Z
     b16:	91 81       	ldd	r25, Z+1	; 0x01
     b18:	89 2b       	or	r24, r25
     b1a:	a1 f6       	brne	.-88     	; 0xac4 <__stack+0x1c5>
     b1c:	7b c0       	rjmp	.+246    	; 0xc14 <__stack+0x315>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b1e:	8e 01       	movw	r16, r28
     b20:	0e 57       	subi	r16, 0x7E	; 126
     b22:	1f 4f       	sbci	r17, 0xFF	; 255
     b24:	ce 01       	movw	r24, r28
     b26:	82 58       	subi	r24, 0x82	; 130
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	fc 01       	movw	r30, r24
     b2c:	60 81       	ld	r22, Z
     b2e:	71 81       	ldd	r23, Z+1	; 0x01
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	93 81       	ldd	r25, Z+3	; 0x03
     b34:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	f8 01       	movw	r30, r16
     b3e:	91 83       	std	Z+1, r25	; 0x01
     b40:	80 83       	st	Z, r24
     b42:	ce 01       	movw	r24, r28
     b44:	8a 57       	subi	r24, 0x7A	; 122
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	9e 01       	movw	r18, r28
     b4a:	2e 57       	subi	r18, 0x7E	; 126
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	31 81       	ldd	r19, Z+1	; 0x01
     b54:	fc 01       	movw	r30, r24
     b56:	31 83       	std	Z+1, r19	; 0x01
     b58:	20 83       	st	Z, r18
     b5a:	ce 01       	movw	r24, r28
     b5c:	8a 57       	subi	r24, 0x7A	; 122
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	fc 01       	movw	r30, r24
     b62:	80 81       	ld	r24, Z
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <__stack+0x267>
     b6a:	9e 01       	movw	r18, r28
     b6c:	2a 57       	subi	r18, 0x7A	; 122
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
     b70:	f9 01       	movw	r30, r18
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	80 83       	st	Z, r24
     b76:	4e c0       	rjmp	.+156    	; 0xc14 <__stack+0x315>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     b78:	ce 01       	movw	r24, r28
     b7a:	8f 58       	subi	r24, 0x8F	; 143
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	4f e7       	ldi	r20, 0x7F	; 127
     b84:	53 e4       	ldi	r21, 0x43	; 67
     b86:	fc 01       	movw	r30, r24
     b88:	60 81       	ld	r22, Z
     b8a:	71 81       	ldd	r23, Z+1	; 0x01
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	93 81       	ldd	r25, Z+3	; 0x03
     b90:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     b94:	18 16       	cp	r1, r24
     b96:	6c f5       	brge	.+90     	; 0xbf2 <__stack+0x2f3>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b98:	8e 01       	movw	r16, r28
     b9a:	08 57       	subi	r16, 0x78	; 120
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	ce 01       	movw	r24, r28
     ba0:	8b 58       	subi	r24, 0x8B	; 139
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	fc 01       	movw	r30, r24
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	f8 01       	movw	r30, r16
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	80 83       	st	Z, r24
     bbc:	ce 01       	movw	r24, r28
     bbe:	86 57       	subi	r24, 0x76	; 118
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
     bc2:	9e 01       	movw	r18, r28
     bc4:	28 57       	subi	r18, 0x78	; 120
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
     bc8:	f9 01       	movw	r30, r18
     bca:	20 81       	ld	r18, Z
     bcc:	31 81       	ldd	r19, Z+1	; 0x01
     bce:	fc 01       	movw	r30, r24
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
     bd4:	ce 01       	movw	r24, r28
     bd6:	86 57       	subi	r24, 0x76	; 118
     bd8:	9f 4f       	sbci	r25, 0xFF	; 255
     bda:	fc 01       	movw	r30, r24
     bdc:	80 81       	ld	r24, Z
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <__stack+0x2e1>
     be4:	9e 01       	movw	r18, r28
     be6:	26 57       	subi	r18, 0x76	; 118
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	f9 01       	movw	r30, r18
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	80 83       	st	Z, r24
     bf0:	28 c0       	rjmp	.+80     	; 0xc42 <__stack+0x343>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bf2:	8e 01       	movw	r16, r28
     bf4:	07 58       	subi	r16, 0x87	; 135
     bf6:	1f 4f       	sbci	r17, 0xFF	; 255
     bf8:	ce 01       	movw	r24, r28
     bfa:	8f 58       	subi	r24, 0x8F	; 143
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	fc 01       	movw	r30, r24
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	f8 01       	movw	r30, r16
     c12:	80 83       	st	Z, r24
     c14:	ce 01       	movw	r24, r28
     c16:	84 57       	subi	r24, 0x74	; 116
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	9e 01       	movw	r18, r28
     c1c:	27 58       	subi	r18, 0x87	; 135
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	f9 01       	movw	r30, r18
     c22:	20 81       	ld	r18, Z
     c24:	fc 01       	movw	r30, r24
     c26:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c28:	ce 01       	movw	r24, r28
     c2a:	84 57       	subi	r24, 0x74	; 116
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	28 2f       	mov	r18, r24
     c34:	2a 95       	dec	r18
     c36:	f1 f7       	brne	.-4      	; 0xc34 <__stack+0x335>
     c38:	ce 01       	movw	r24, r28
     c3a:	84 57       	subi	r24, 0x74	; 116
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18
  _delay_us(37);
  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <hd44780_outnibble>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	a4 e1       	ldi	r26, 0x14	; 20
     c50:	b2 e4       	ldi	r27, 0x42	; 66
     c52:	89 8b       	std	Y+17, r24	; 0x11
     c54:	9a 8b       	std	Y+18, r25	; 0x12
     c56:	ab 8b       	std	Y+19, r26	; 0x13
     c58:	bc 8b       	std	Y+20, r27	; 0x14
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     c5a:	8e 01       	movw	r16, r28
     c5c:	0b 5a       	subi	r16, 0xAB	; 171
     c5e:	1f 4f       	sbci	r17, 0xFF	; 255
     c60:	2b ea       	ldi	r18, 0xAB	; 171
     c62:	3a ea       	ldi	r19, 0xAA	; 170
     c64:	4a ea       	ldi	r20, 0xAA	; 170
     c66:	5e e3       	ldi	r21, 0x3E	; 62
     c68:	69 89       	ldd	r22, Y+17	; 0x11
     c6a:	7a 89       	ldd	r23, Y+18	; 0x12
     c6c:	8b 89       	ldd	r24, Y+19	; 0x13
     c6e:	9c 89       	ldd	r25, Y+20	; 0x14
     c70:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	f8 01       	movw	r30, r16
     c7a:	80 83       	st	Z, r24
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	a2 83       	std	Z+2, r26	; 0x02
     c80:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     c82:	8e 01       	movw	r16, r28
     c84:	07 5a       	subi	r16, 0xA7	; 167
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e8       	ldi	r20, 0x80	; 128
     c8e:	5e e3       	ldi	r21, 0x3E	; 62
     c90:	69 89       	ldd	r22, Y+17	; 0x11
     c92:	7a 89       	ldd	r23, Y+18	; 0x12
     c94:	8b 89       	ldd	r24, Y+19	; 0x13
     c96:	9c 89       	ldd	r25, Y+20	; 0x14
     c98:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	f8 01       	movw	r30, r16
     ca2:	80 83       	st	Z, r24
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	a2 83       	std	Z+2, r26	; 0x02
     ca8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     caa:	ce 01       	movw	r24, r28
     cac:	8b 5a       	subi	r24, 0xAB	; 171
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e8       	ldi	r20, 0x80	; 128
     cb6:	5f e3       	ldi	r21, 0x3F	; 63
     cb8:	fc 01       	movw	r30, r24
     cba:	60 81       	ld	r22, Z
     cbc:	71 81       	ldd	r23, Z+1	; 0x01
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	93 81       	ldd	r25, Z+3	; 0x03
     cc2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	3c f4       	brge	.+14     	; 0xcd8 <__stack+0x3d9>
		__ticks = 1;
     cca:	ce 01       	movw	r24, r28
     ccc:	83 5a       	subi	r24, 0xA3	; 163
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
     cd6:	2c c1       	rjmp	.+600    	; 0xf30 <__stack+0x631>
	else if (__tmp2 > 65535)
     cd8:	ce 01       	movw	r24, r28
     cda:	87 5a       	subi	r24, 0xA7	; 167
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	3f ef       	ldi	r19, 0xFF	; 255
     ce2:	4f e7       	ldi	r20, 0x7F	; 127
     ce4:	57 e4       	ldi	r21, 0x47	; 71
     ce6:	fc 01       	movw	r30, r24
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	0c f0       	brlt	.+2      	; 0xcfa <__stack+0x3fb>
     cf8:	cd c0       	rjmp	.+410    	; 0xe94 <__stack+0x595>
	{
		_delay_ms(__us / 1000.0);
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	4a e7       	ldi	r20, 0x7A	; 122
     d00:	54 e4       	ldi	r21, 0x44	; 68
     d02:	69 89       	ldd	r22, Y+17	; 0x11
     d04:	7a 89       	ldd	r23, Y+18	; 0x12
     d06:	8b 89       	ldd	r24, Y+19	; 0x13
     d08:	9c 89       	ldd	r25, Y+20	; 0x14
     d0a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9e 01       	movw	r18, r28
     d14:	22 5a       	subi	r18, 0xA2	; 162
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	f9 01       	movw	r30, r18
     d1a:	80 83       	st	Z, r24
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	a2 83       	std	Z+2, r26	; 0x02
     d20:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d22:	8e 01       	movw	r16, r28
     d24:	0e 59       	subi	r16, 0x9E	; 158
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	ce 01       	movw	r24, r28
     d2a:	82 5a       	subi	r24, 0xA2	; 162
     d2c:	9f 4f       	sbci	r25, 0xFF	; 255
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	4a e7       	ldi	r20, 0x7A	; 122
     d34:	53 e4       	ldi	r21, 0x43	; 67
     d36:	fc 01       	movw	r30, r24
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	f8 01       	movw	r30, r16
     d4a:	80 83       	st	Z, r24
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	a2 83       	std	Z+2, r26	; 0x02
     d50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d52:	ce 01       	movw	r24, r28
     d54:	8e 59       	subi	r24, 0x9E	; 158
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	fc 01       	movw	r30, r24
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     d6e:	88 23       	and	r24, r24
     d70:	4c f4       	brge	.+18     	; 0xd84 <__stack+0x485>
		__ticks = 1;
     d72:	ce 01       	movw	r24, r28
     d74:	8a 59       	subi	r24, 0x9A	; 154
     d76:	9f 4f       	sbci	r25, 0xFF	; 255
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	fc 01       	movw	r30, r24
     d7e:	31 83       	std	Z+1, r19	; 0x01
     d80:	20 83       	st	Z, r18
     d82:	6d c0       	rjmp	.+218    	; 0xe5e <__stack+0x55f>
	else if (__tmp > 65535)
     d84:	ce 01       	movw	r24, r28
     d86:	8e 59       	subi	r24, 0x9E	; 158
     d88:	9f 4f       	sbci	r25, 0xFF	; 255
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	3f ef       	ldi	r19, 0xFF	; 255
     d8e:	4f e7       	ldi	r20, 0x7F	; 127
     d90:	57 e4       	ldi	r21, 0x47	; 71
     d92:	fc 01       	movw	r30, r24
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     da0:	18 16       	cp	r1, r24
     da2:	0c f0       	brlt	.+2      	; 0xda6 <__stack+0x4a7>
     da4:	4a c0       	rjmp	.+148    	; 0xe3a <__stack+0x53b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da6:	ce 01       	movw	r24, r28
     da8:	82 5a       	subi	r24, 0xA2	; 162
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	fc 01       	movw	r30, r24
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	8e 01       	movw	r16, r28
     dc8:	0a 59       	subi	r16, 0x9A	; 154
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	f8 01       	movw	r30, r16
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	24 c0       	rjmp	.+72     	; 0xe28 <__stack+0x529>
     de0:	ce 01       	movw	r24, r28
     de2:	88 59       	subi	r24, 0x98	; 152
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	29 e1       	ldi	r18, 0x19	; 25
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	fc 01       	movw	r30, r24
     dec:	31 83       	std	Z+1, r19	; 0x01
     dee:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df0:	ce 01       	movw	r24, r28
     df2:	88 59       	subi	r24, 0x98	; 152
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <__stack+0x4fd>
     e00:	9e 01       	movw	r18, r28
     e02:	28 59       	subi	r18, 0x98	; 152
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	f9 01       	movw	r30, r18
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0c:	ce 01       	movw	r24, r28
     e0e:	8a 59       	subi	r24, 0x9A	; 154
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	9e 01       	movw	r18, r28
     e14:	2a 59       	subi	r18, 0x9A	; 154
     e16:	3f 4f       	sbci	r19, 0xFF	; 255
     e18:	f9 01       	movw	r30, r18
     e1a:	20 81       	ld	r18, Z
     e1c:	31 81       	ldd	r19, Z+1	; 0x01
     e1e:	21 50       	subi	r18, 0x01	; 1
     e20:	31 09       	sbc	r19, r1
     e22:	fc 01       	movw	r30, r24
     e24:	31 83       	std	Z+1, r19	; 0x01
     e26:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	ce 01       	movw	r24, r28
     e2a:	8a 59       	subi	r24, 0x9A	; 154
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	fc 01       	movw	r30, r24
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	89 2b       	or	r24, r25
     e36:	a1 f6       	brne	.-88     	; 0xde0 <__stack+0x4e1>
     e38:	7b c0       	rjmp	.+246    	; 0xf30 <__stack+0x631>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3a:	8e 01       	movw	r16, r28
     e3c:	0a 59       	subi	r16, 0x9A	; 154
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	ce 01       	movw	r24, r28
     e42:	8e 59       	subi	r24, 0x9E	; 158
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	fc 01       	movw	r30, r24
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	93 81       	ldd	r25, Z+3	; 0x03
     e50:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	f8 01       	movw	r30, r16
     e5a:	91 83       	std	Z+1, r25	; 0x01
     e5c:	80 83       	st	Z, r24
     e5e:	ce 01       	movw	r24, r28
     e60:	86 59       	subi	r24, 0x96	; 150
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	9e 01       	movw	r18, r28
     e66:	2a 59       	subi	r18, 0x9A	; 154
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	f9 01       	movw	r30, r18
     e6c:	20 81       	ld	r18, Z
     e6e:	31 81       	ldd	r19, Z+1	; 0x01
     e70:	fc 01       	movw	r30, r24
     e72:	31 83       	std	Z+1, r19	; 0x01
     e74:	20 83       	st	Z, r18
     e76:	ce 01       	movw	r24, r28
     e78:	86 59       	subi	r24, 0x96	; 150
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <__stack+0x583>
     e86:	9e 01       	movw	r18, r28
     e88:	26 59       	subi	r18, 0x96	; 150
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	f9 01       	movw	r30, r18
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
     e92:	4e c0       	rjmp	.+156    	; 0xf30 <__stack+0x631>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     e94:	ce 01       	movw	r24, r28
     e96:	8b 5a       	subi	r24, 0xAB	; 171
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	4f e7       	ldi	r20, 0x7F	; 127
     ea0:	53 e4       	ldi	r21, 0x43	; 67
     ea2:	fc 01       	movw	r30, r24
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	6c f5       	brge	.+90     	; 0xf0e <__stack+0x60f>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     eb4:	8e 01       	movw	r16, r28
     eb6:	04 59       	subi	r16, 0x94	; 148
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	ce 01       	movw	r24, r28
     ebc:	87 5a       	subi	r24, 0xA7	; 167
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	fc 01       	movw	r30, r24
     ec2:	60 81       	ld	r22, Z
     ec4:	71 81       	ldd	r23, Z+1	; 0x01
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	93 81       	ldd	r25, Z+3	; 0x03
     eca:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	f8 01       	movw	r30, r16
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24
     ed8:	ce 01       	movw	r24, r28
     eda:	82 59       	subi	r24, 0x92	; 146
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	9e 01       	movw	r18, r28
     ee0:	24 59       	subi	r18, 0x94	; 148
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	f9 01       	movw	r30, r18
     ee6:	20 81       	ld	r18, Z
     ee8:	31 81       	ldd	r19, Z+1	; 0x01
     eea:	fc 01       	movw	r30, r24
     eec:	31 83       	std	Z+1, r19	; 0x01
     eee:	20 83       	st	Z, r18
     ef0:	ce 01       	movw	r24, r28
     ef2:	82 59       	subi	r24, 0x92	; 146
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	fc 01       	movw	r30, r24
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <__stack+0x5fd>
     f00:	9e 01       	movw	r18, r28
     f02:	22 59       	subi	r18, 0x92	; 146
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	f9 01       	movw	r30, r18
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
     f0c:	28 c0       	rjmp	.+80     	; 0xf5e <__stack+0x65f>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f0e:	8e 01       	movw	r16, r28
     f10:	03 5a       	subi	r16, 0xA3	; 163
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	ce 01       	movw	r24, r28
     f16:	8b 5a       	subi	r24, 0xAB	; 171
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	fc 01       	movw	r30, r24
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	f8 01       	movw	r30, r16
     f2e:	80 83       	st	Z, r24
     f30:	ce 01       	movw	r24, r28
     f32:	80 59       	subi	r24, 0x90	; 144
     f34:	9f 4f       	sbci	r25, 0xFF	; 255
     f36:	9e 01       	movw	r18, r28
     f38:	23 5a       	subi	r18, 0xA3	; 163
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	f9 01       	movw	r30, r18
     f3e:	20 81       	ld	r18, Z
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f44:	ce 01       	movw	r24, r28
     f46:	80 59       	subi	r24, 0x90	; 144
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	fc 01       	movw	r30, r24
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	2a 95       	dec	r18
     f52:	f1 f7       	brne	.-4      	; 0xf50 <__stack+0x651>
     f54:	ce 01       	movw	r24, r28
     f56:	80 59       	subi	r24, 0x90	; 144
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	fc 01       	movw	r30, r24
     f5c:	20 83       	st	Z, r18
  _delay_us(37);
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	88 e2       	ldi	r24, 0x28	; 40
     f62:	0e 94 1a 02 	call	0x434	; 0x434 <hd44780_outbyte>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a4 e1       	ldi	r26, 0x14	; 20
     f6c:	b2 e4       	ldi	r27, 0x42	; 66
     f6e:	8d 8b       	std	Y+21, r24	; 0x15
     f70:	9e 8b       	std	Y+22, r25	; 0x16
     f72:	af 8b       	std	Y+23, r26	; 0x17
     f74:	b8 8f       	std	Y+24, r27	; 0x18
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     f76:	2b ea       	ldi	r18, 0xAB	; 171
     f78:	3a ea       	ldi	r19, 0xAA	; 170
     f7a:	4a ea       	ldi	r20, 0xAA	; 170
     f7c:	5e e3       	ldi	r21, 0x3E	; 62
     f7e:	6d 89       	ldd	r22, Y+21	; 0x15
     f80:	7e 89       	ldd	r23, Y+22	; 0x16
     f82:	8f 89       	ldd	r24, Y+23	; 0x17
     f84:	98 8d       	ldd	r25, Y+24	; 0x18
     f86:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	89 af       	std	Y+57, r24	; 0x39
     f90:	9a af       	std	Y+58, r25	; 0x3a
     f92:	ab af       	std	Y+59, r26	; 0x3b
     f94:	bc af       	std	Y+60, r27	; 0x3c
	__tmp2 = ((F_CPU) / 4e6) * __us;
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5e e3       	ldi	r21, 0x3E	; 62
     f9e:	6d 89       	ldd	r22, Y+21	; 0x15
     fa0:	7e 89       	ldd	r23, Y+22	; 0x16
     fa2:	8f 89       	ldd	r24, Y+23	; 0x17
     fa4:	98 8d       	ldd	r25, Y+24	; 0x18
     fa6:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 01       	movw	r18, r28
     fb0:	23 5c       	subi	r18, 0xC3	; 195
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	f9 01       	movw	r30, r18
     fb6:	80 83       	st	Z, r24
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	a2 83       	std	Z+2, r26	; 0x02
     fbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e8       	ldi	r20, 0x80	; 128
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	69 ad       	ldd	r22, Y+57	; 0x39
     fc8:	7a ad       	ldd	r23, Y+58	; 0x3a
     fca:	8b ad       	ldd	r24, Y+59	; 0x3b
     fcc:	9c ad       	ldd	r25, Y+60	; 0x3c
     fce:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     fd2:	88 23       	and	r24, r24
     fd4:	3c f4       	brge	.+14     	; 0xfe4 <__stack+0x6e5>
		__ticks = 1;
     fd6:	ce 01       	movw	r24, r28
     fd8:	8f 5b       	subi	r24, 0xBF	; 191
     fda:	9f 4f       	sbci	r25, 0xFF	; 255
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18
     fe2:	22 c1       	rjmp	.+580    	; 0x1228 <__stack+0x929>
	else if (__tmp2 > 65535)
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	3f ef       	ldi	r19, 0xFF	; 255
     fe8:	4f e7       	ldi	r20, 0x7F	; 127
     fea:	57 e4       	ldi	r21, 0x47	; 71
     fec:	ce 01       	movw	r24, r28
     fee:	cd 96       	adiw	r24, 0x3d	; 61
     ff0:	fc 01       	movw	r30, r24
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
     ffe:	18 16       	cp	r1, r24
    1000:	0c f0       	brlt	.+2      	; 0x1004 <__stack+0x705>
    1002:	cd c0       	rjmp	.+410    	; 0x119e <__stack+0x89f>
	{
		_delay_ms(__us / 1000.0);
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a e7       	ldi	r20, 0x7A	; 122
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	6d 89       	ldd	r22, Y+21	; 0x15
    100e:	7e 89       	ldd	r23, Y+22	; 0x16
    1010:	8f 89       	ldd	r24, Y+23	; 0x17
    1012:	98 8d       	ldd	r25, Y+24	; 0x18
    1014:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	9e 01       	movw	r18, r28
    101e:	2e 5b       	subi	r18, 0xBE	; 190
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    1022:	f9 01       	movw	r30, r18
    1024:	80 83       	st	Z, r24
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	a2 83       	std	Z+2, r26	; 0x02
    102a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    102c:	8e 01       	movw	r16, r28
    102e:	0a 5b       	subi	r16, 0xBA	; 186
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	ce 01       	movw	r24, r28
    1034:	8e 5b       	subi	r24, 0xBE	; 190
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4a e7       	ldi	r20, 0x7A	; 122
    103e:	53 e4       	ldi	r21, 0x43	; 67
    1040:	fc 01       	movw	r30, r24
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	f8 01       	movw	r30, r16
    1054:	80 83       	st	Z, r24
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	a2 83       	std	Z+2, r26	; 0x02
    105a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    105c:	ce 01       	movw	r24, r28
    105e:	8a 5b       	subi	r24, 0xBA	; 186
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	fc 01       	movw	r30, r24
    106c:	60 81       	ld	r22, Z
    106e:	71 81       	ldd	r23, Z+1	; 0x01
    1070:	82 81       	ldd	r24, Z+2	; 0x02
    1072:	93 81       	ldd	r25, Z+3	; 0x03
    1074:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1078:	88 23       	and	r24, r24
    107a:	4c f4       	brge	.+18     	; 0x108e <__stack+0x78f>
		__ticks = 1;
    107c:	ce 01       	movw	r24, r28
    107e:	86 5b       	subi	r24, 0xB6	; 182
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	fc 01       	movw	r30, r24
    1088:	31 83       	std	Z+1, r19	; 0x01
    108a:	20 83       	st	Z, r18
    108c:	6d c0       	rjmp	.+218    	; 0x1168 <__stack+0x869>
	else if (__tmp > 65535)
    108e:	ce 01       	movw	r24, r28
    1090:	8a 5b       	subi	r24, 0xBA	; 186
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	4f e7       	ldi	r20, 0x7F	; 127
    109a:	57 e4       	ldi	r21, 0x47	; 71
    109c:	fc 01       	movw	r30, r24
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	93 81       	ldd	r25, Z+3	; 0x03
    10a6:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    10aa:	18 16       	cp	r1, r24
    10ac:	0c f0       	brlt	.+2      	; 0x10b0 <__stack+0x7b1>
    10ae:	4a c0       	rjmp	.+148    	; 0x1144 <__stack+0x845>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b0:	ce 01       	movw	r24, r28
    10b2:	8e 5b       	subi	r24, 0xBE	; 190
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e2       	ldi	r20, 0x20	; 32
    10bc:	51 e4       	ldi	r21, 0x41	; 65
    10be:	fc 01       	movw	r30, r24
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	8e 01       	movw	r16, r28
    10d2:	06 5b       	subi	r16, 0xB6	; 182
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	f8 01       	movw	r30, r16
    10e4:	91 83       	std	Z+1, r25	; 0x01
    10e6:	80 83       	st	Z, r24
    10e8:	24 c0       	rjmp	.+72     	; 0x1132 <__stack+0x833>
    10ea:	ce 01       	movw	r24, r28
    10ec:	84 5b       	subi	r24, 0xB4	; 180
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	29 e1       	ldi	r18, 0x19	; 25
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	fc 01       	movw	r30, r24
    10f6:	31 83       	std	Z+1, r19	; 0x01
    10f8:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10fa:	ce 01       	movw	r24, r28
    10fc:	84 5b       	subi	r24, 0xB4	; 180
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <__stack+0x807>
    110a:	9e 01       	movw	r18, r28
    110c:	24 5b       	subi	r18, 0xB4	; 180
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	f9 01       	movw	r30, r18
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1116:	ce 01       	movw	r24, r28
    1118:	86 5b       	subi	r24, 0xB6	; 182
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	9e 01       	movw	r18, r28
    111e:	26 5b       	subi	r18, 0xB6	; 182
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	f9 01       	movw	r30, r18
    1124:	20 81       	ld	r18, Z
    1126:	31 81       	ldd	r19, Z+1	; 0x01
    1128:	21 50       	subi	r18, 0x01	; 1
    112a:	31 09       	sbc	r19, r1
    112c:	fc 01       	movw	r30, r24
    112e:	31 83       	std	Z+1, r19	; 0x01
    1130:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	ce 01       	movw	r24, r28
    1134:	86 5b       	subi	r24, 0xB6	; 182
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	fc 01       	movw	r30, r24
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	89 2b       	or	r24, r25
    1140:	a1 f6       	brne	.-88     	; 0x10ea <__stack+0x7eb>
    1142:	72 c0       	rjmp	.+228    	; 0x1228 <__stack+0x929>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	8e 01       	movw	r16, r28
    1146:	06 5b       	subi	r16, 0xB6	; 182
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	ce 01       	movw	r24, r28
    114c:	8a 5b       	subi	r24, 0xBA	; 186
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	fc 01       	movw	r30, r24
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	f8 01       	movw	r30, r16
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	80 83       	st	Z, r24
    1168:	ce 01       	movw	r24, r28
    116a:	82 5b       	subi	r24, 0xB2	; 178
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	9e 01       	movw	r18, r28
    1170:	26 5b       	subi	r18, 0xB6	; 182
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	f9 01       	movw	r30, r18
    1176:	20 81       	ld	r18, Z
    1178:	31 81       	ldd	r19, Z+1	; 0x01
    117a:	fc 01       	movw	r30, r24
    117c:	31 83       	std	Z+1, r19	; 0x01
    117e:	20 83       	st	Z, r18
    1180:	ce 01       	movw	r24, r28
    1182:	82 5b       	subi	r24, 0xB2	; 178
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	fc 01       	movw	r30, r24
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <__stack+0x88d>
    1190:	9e 01       	movw	r18, r28
    1192:	22 5b       	subi	r18, 0xB2	; 178
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	f9 01       	movw	r30, r18
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
    119c:	45 c0       	rjmp	.+138    	; 0x1228 <__stack+0x929>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	53 e4       	ldi	r21, 0x43	; 67
    11a6:	69 ad       	ldd	r22, Y+57	; 0x39
    11a8:	7a ad       	ldd	r23, Y+58	; 0x3a
    11aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    11ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    11ae:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    11b2:	18 16       	cp	r1, r24
    11b4:	64 f5       	brge	.+88     	; 0x120e <__stack+0x90f>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    11b6:	8e 01       	movw	r16, r28
    11b8:	00 5b       	subi	r16, 0xB0	; 176
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	ce 01       	movw	r24, r28
    11be:	cd 96       	adiw	r24, 0x3d	; 61
    11c0:	fc 01       	movw	r30, r24
    11c2:	60 81       	ld	r22, Z
    11c4:	71 81       	ldd	r23, Z+1	; 0x01
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	f8 01       	movw	r30, r16
    11d4:	91 83       	std	Z+1, r25	; 0x01
    11d6:	80 83       	st	Z, r24
    11d8:	ce 01       	movw	r24, r28
    11da:	8e 5a       	subi	r24, 0xAE	; 174
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	9e 01       	movw	r18, r28
    11e0:	20 5b       	subi	r18, 0xB0	; 176
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	f9 01       	movw	r30, r18
    11e6:	20 81       	ld	r18, Z
    11e8:	31 81       	ldd	r19, Z+1	; 0x01
    11ea:	fc 01       	movw	r30, r24
    11ec:	31 83       	std	Z+1, r19	; 0x01
    11ee:	20 83       	st	Z, r18
    11f0:	ce 01       	movw	r24, r28
    11f2:	8e 5a       	subi	r24, 0xAE	; 174
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <__stack+0x8fd>
    1200:	9e 01       	movw	r18, r28
    1202:	2e 5a       	subi	r18, 0xAE	; 174
    1204:	3f 4f       	sbci	r19, 0xFF	; 255
    1206:	f9 01       	movw	r30, r18
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
    120c:	24 c0       	rjmp	.+72     	; 0x1256 <__stack+0x957>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    120e:	8e 01       	movw	r16, r28
    1210:	0f 5b       	subi	r16, 0xBF	; 191
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
    1214:	69 ad       	ldd	r22, Y+57	; 0x39
    1216:	7a ad       	ldd	r23, Y+58	; 0x3a
    1218:	8b ad       	ldd	r24, Y+59	; 0x3b
    121a:	9c ad       	ldd	r25, Y+60	; 0x3c
    121c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	f8 01       	movw	r30, r16
    1226:	80 83       	st	Z, r24
    1228:	ce 01       	movw	r24, r28
    122a:	8c 5a       	subi	r24, 0xAC	; 172
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	9e 01       	movw	r18, r28
    1230:	2f 5b       	subi	r18, 0xBF	; 191
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	f9 01       	movw	r30, r18
    1236:	20 81       	ld	r18, Z
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    123c:	ce 01       	movw	r24, r28
    123e:	8c 5a       	subi	r24, 0xAC	; 172
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	fc 01       	movw	r30, r24
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	2a 95       	dec	r18
    124a:	f1 f7       	brne	.-4      	; 0x1248 <__stack+0x949>
    124c:	ce 01       	movw	r24, r28
    124e:	8c 5a       	subi	r24, 0xAC	; 172
    1250:	9f 4f       	sbci	r25, 0xFF	; 255
    1252:	fc 01       	movw	r30, r24
    1254:	20 83       	st	Z, r18
  _delay_us(37);
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	88 e0       	ldi	r24, 0x08	; 8
    125a:	0e 94 1a 02 	call	0x434	; 0x434 <hd44780_outbyte>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a4 e1       	ldi	r26, 0x14	; 20
    1264:	b2 e4       	ldi	r27, 0x42	; 66
    1266:	89 8f       	std	Y+25, r24	; 0x19
    1268:	9a 8f       	std	Y+26, r25	; 0x1a
    126a:	ab 8f       	std	Y+27, r26	; 0x1b
    126c:	bc 8f       	std	Y+28, r27	; 0x1c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    126e:	2b ea       	ldi	r18, 0xAB	; 171
    1270:	3a ea       	ldi	r19, 0xAA	; 170
    1272:	4a ea       	ldi	r20, 0xAA	; 170
    1274:	5e e3       	ldi	r21, 0x3E	; 62
    1276:	69 8d       	ldd	r22, Y+25	; 0x19
    1278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    127a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127e:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	8d 8f       	std	Y+29, r24	; 0x1d
    1288:	9e 8f       	std	Y+30, r25	; 0x1e
    128a:	af 8f       	std	Y+31, r26	; 0x1f
    128c:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp2 = ((F_CPU) / 4e6) * __us;
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5e e3       	ldi	r21, 0x3E	; 62
    1296:	69 8d       	ldd	r22, Y+25	; 0x19
    1298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    129a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    129c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129e:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	89 a3       	std	Y+33, r24	; 0x21
    12a8:	9a a3       	std	Y+34, r25	; 0x22
    12aa:	ab a3       	std	Y+35, r26	; 0x23
    12ac:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12b8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    12ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12bc:	98 a1       	ldd	r25, Y+32	; 0x20
    12be:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	1c f4       	brge	.+6      	; 0x12cc <__stack+0x9cd>
		__ticks = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	8d a3       	std	Y+37, r24	; 0x25
    12ca:	b2 c0       	rjmp	.+356    	; 0x1430 <__stack+0xb31>
	else if (__tmp2 > 65535)
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	69 a1       	ldd	r22, Y+33	; 0x21
    12d6:	7a a1       	ldd	r23, Y+34	; 0x22
    12d8:	8b a1       	ldd	r24, Y+35	; 0x23
    12da:	9c a1       	ldd	r25, Y+36	; 0x24
    12dc:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	0c f0       	brlt	.+2      	; 0x12e6 <__stack+0x9e7>
    12e4:	7b c0       	rjmp	.+246    	; 0x13dc <__stack+0xadd>
	{
		_delay_ms(__us / 1000.0);
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a e7       	ldi	r20, 0x7A	; 122
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	69 8d       	ldd	r22, Y+25	; 0x19
    12f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f6:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	8e a3       	std	Y+38, r24	; 0x26
    1300:	9f a3       	std	Y+39, r25	; 0x27
    1302:	a8 a7       	std	Y+40, r26	; 0x28
    1304:	b9 a7       	std	Y+41, r27	; 0x29

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a e7       	ldi	r20, 0x7A	; 122
    130c:	53 e4       	ldi	r21, 0x43	; 67
    130e:	6e a1       	ldd	r22, Y+38	; 0x26
    1310:	7f a1       	ldd	r23, Y+39	; 0x27
    1312:	88 a5       	ldd	r24, Y+40	; 0x28
    1314:	99 a5       	ldd	r25, Y+41	; 0x29
    1316:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8a a7       	std	Y+42, r24	; 0x2a
    1320:	9b a7       	std	Y+43, r25	; 0x2b
    1322:	ac a7       	std	Y+44, r26	; 0x2c
    1324:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	6a a5       	ldd	r22, Y+42	; 0x2a
    1330:	7b a5       	ldd	r23, Y+43	; 0x2b
    1332:	8c a5       	ldd	r24, Y+44	; 0x2c
    1334:	9d a5       	ldd	r25, Y+45	; 0x2d
    1336:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    133a:	88 23       	and	r24, r24
    133c:	2c f4       	brge	.+10     	; 0x1348 <__stack+0xa49>
		__ticks = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9f a7       	std	Y+47, r25	; 0x2f
    1344:	8e a7       	std	Y+46, r24	; 0x2e
    1346:	3f c0       	rjmp	.+126    	; 0x13c6 <__stack+0xac7>
	else if (__tmp > 65535)
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	6a a5       	ldd	r22, Y+42	; 0x2a
    1352:	7b a5       	ldd	r23, Y+43	; 0x2b
    1354:	8c a5       	ldd	r24, Y+44	; 0x2c
    1356:	9d a5       	ldd	r25, Y+45	; 0x2d
    1358:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    135c:	18 16       	cp	r1, r24
    135e:	4c f5       	brge	.+82     	; 0x13b2 <__stack+0xab3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	6e a1       	ldd	r22, Y+38	; 0x26
    136a:	7f a1       	ldd	r23, Y+39	; 0x27
    136c:	88 a5       	ldd	r24, Y+40	; 0x28
    136e:	99 a5       	ldd	r25, Y+41	; 0x29
    1370:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9f a7       	std	Y+47, r25	; 0x2f
    1386:	8e a7       	std	Y+46, r24	; 0x2e
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <__stack+0xaa9>
    138a:	89 e1       	ldi	r24, 0x19	; 25
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	99 ab       	std	Y+49, r25	; 0x31
    1390:	88 ab       	std	Y+48, r24	; 0x30
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1392:	88 a9       	ldd	r24, Y+48	; 0x30
    1394:	99 a9       	ldd	r25, Y+49	; 0x31
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <__stack+0xa97>
    139a:	99 ab       	std	Y+49, r25	; 0x31
    139c:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139e:	8e a5       	ldd	r24, Y+46	; 0x2e
    13a0:	9f a5       	ldd	r25, Y+47	; 0x2f
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	9f a7       	std	Y+47, r25	; 0x2f
    13a6:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    13aa:	9f a5       	ldd	r25, Y+47	; 0x2f
    13ac:	89 2b       	or	r24, r25
    13ae:	69 f7       	brne	.-38     	; 0x138a <__stack+0xa8b>
    13b0:	3f c0       	rjmp	.+126    	; 0x1430 <__stack+0xb31>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b2:	6a a5       	ldd	r22, Y+42	; 0x2a
    13b4:	7b a5       	ldd	r23, Y+43	; 0x2b
    13b6:	8c a5       	ldd	r24, Y+44	; 0x2c
    13b8:	9d a5       	ldd	r25, Y+45	; 0x2d
    13ba:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9f a7       	std	Y+47, r25	; 0x2f
    13c4:	8e a7       	std	Y+46, r24	; 0x2e
    13c6:	8e a5       	ldd	r24, Y+46	; 0x2e
    13c8:	9f a5       	ldd	r25, Y+47	; 0x2f
    13ca:	9b ab       	std	Y+51, r25	; 0x33
    13cc:	8a ab       	std	Y+50, r24	; 0x32
    13ce:	8a a9       	ldd	r24, Y+50	; 0x32
    13d0:	9b a9       	ldd	r25, Y+51	; 0x33
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <__stack+0xad3>
    13d6:	9b ab       	std	Y+51, r25	; 0x33
    13d8:	8a ab       	std	Y+50, r24	; 0x32
    13da:	2a c0       	rjmp	.+84     	; 0x1430 <__stack+0xb31>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4f e7       	ldi	r20, 0x7F	; 127
    13e2:	53 e4       	ldi	r21, 0x43	; 67
    13e4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13e6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    13e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13ea:	98 a1       	ldd	r25, Y+32	; 0x20
    13ec:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	ac f4       	brge	.+42     	; 0x141e <__stack+0xb1f>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    13f4:	69 a1       	ldd	r22, Y+33	; 0x21
    13f6:	7a a1       	ldd	r23, Y+34	; 0x22
    13f8:	8b a1       	ldd	r24, Y+35	; 0x23
    13fa:	9c a1       	ldd	r25, Y+36	; 0x24
    13fc:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9d ab       	std	Y+53, r25	; 0x35
    1406:	8c ab       	std	Y+52, r24	; 0x34
    1408:	8c a9       	ldd	r24, Y+52	; 0x34
    140a:	9d a9       	ldd	r25, Y+53	; 0x35
    140c:	9f ab       	std	Y+55, r25	; 0x37
    140e:	8e ab       	std	Y+54, r24	; 0x36
    1410:	8e a9       	ldd	r24, Y+54	; 0x36
    1412:	9f a9       	ldd	r25, Y+55	; 0x37
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <__stack+0xb15>
    1418:	9f ab       	std	Y+55, r25	; 0x37
    141a:	8e ab       	std	Y+54, r24	; 0x36
  _delay_us(37);
}
    141c:	0f c0       	rjmp	.+30     	; 0x143c <__stack+0xb3d>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    141e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1420:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1422:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1424:	98 a1       	ldd	r25, Y+32	; 0x20
    1426:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8d a3       	std	Y+37, r24	; 0x25
    1430:	8d a1       	ldd	r24, Y+37	; 0x25
    1432:	88 af       	std	Y+56, r24	; 0x38
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1434:	88 ad       	ldd	r24, Y+56	; 0x38
    1436:	8a 95       	dec	r24
    1438:	f1 f7       	brne	.-4      	; 0x1436 <__stack+0xb37>
    143a:	88 af       	std	Y+56, r24	; 0x38
    143c:	00 00       	nop
    143e:	c6 55       	subi	r28, 0x56	; 86
    1440:	df 4f       	sbci	r29, 0xFF	; 255
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	08 95       	ret

00001456 <lcd_init>:
 * Setup the LCD controller.  First, call the hardware initialization
 * function, then adjust the display attributes we want.
 */
void
lcd_init(void)
{
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	c0 56       	subi	r28, 0x60	; 96
    1464:	d1 09       	sbc	r29, r1
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
  hd44780_init();
    1470:	0e 94 32 02 	call	0x464	; 0x464 <hd44780_init>
  hd44780_outcmd(HD44780_CLR);//Clear the display.
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	0e 94 1a 02 	call	0x434	; 0x434 <hd44780_outbyte>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a4 e1       	ldi	r26, 0x14	; 20
    1482:	b2 e4       	ldi	r27, 0x42	; 66
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	ab 83       	std	Y+3, r26	; 0x03
    148a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    148c:	8e 01       	movw	r16, r28
    148e:	0b 5b       	subi	r16, 0xBB	; 187
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	2b ea       	ldi	r18, 0xAB	; 171
    1494:	3a ea       	ldi	r19, 0xAA	; 170
    1496:	4a ea       	ldi	r20, 0xAA	; 170
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	69 81       	ldd	r22, Y+1	; 0x01
    149c:	7a 81       	ldd	r23, Y+2	; 0x02
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	f8 01       	movw	r30, r16
    14ac:	80 83       	st	Z, r24
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	a2 83       	std	Z+2, r26	; 0x02
    14b2:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    14b4:	8e 01       	movw	r16, r28
    14b6:	07 5b       	subi	r16, 0xB7	; 183
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5e e3       	ldi	r21, 0x3E	; 62
    14c2:	69 81       	ldd	r22, Y+1	; 0x01
    14c4:	7a 81       	ldd	r23, Y+2	; 0x02
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	f8 01       	movw	r30, r16
    14d4:	80 83       	st	Z, r24
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	a2 83       	std	Z+2, r26	; 0x02
    14da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14dc:	ce 01       	movw	r24, r28
    14de:	8b 5b       	subi	r24, 0xBB	; 187
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	fc 01       	movw	r30, r24
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    14f8:	88 23       	and	r24, r24
    14fa:	3c f4       	brge	.+14     	; 0x150a <lcd_init+0xb4>
		__ticks = 1;
    14fc:	ce 01       	movw	r24, r28
    14fe:	83 5b       	subi	r24, 0xB3	; 179
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	21 e0       	ldi	r18, 0x01	; 1
    1504:	fc 01       	movw	r30, r24
    1506:	20 83       	st	Z, r18
    1508:	2c c1       	rjmp	.+600    	; 0x1762 <lcd_init+0x30c>
	else if (__tmp2 > 65535)
    150a:	ce 01       	movw	r24, r28
    150c:	87 5b       	subi	r24, 0xB7	; 183
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	57 e4       	ldi	r21, 0x47	; 71
    1518:	fc 01       	movw	r30, r24
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    1526:	18 16       	cp	r1, r24
    1528:	0c f0       	brlt	.+2      	; 0x152c <lcd_init+0xd6>
    152a:	cd c0       	rjmp	.+410    	; 0x16c6 <lcd_init+0x270>
	{
		_delay_ms(__us / 1000.0);
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a e7       	ldi	r20, 0x7A	; 122
    1532:	54 e4       	ldi	r21, 0x44	; 68
    1534:	69 81       	ldd	r22, Y+1	; 0x01
    1536:	7a 81       	ldd	r23, Y+2	; 0x02
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9e 01       	movw	r18, r28
    1546:	22 5b       	subi	r18, 0xB2	; 178
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	f9 01       	movw	r30, r18
    154c:	80 83       	st	Z, r24
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	a2 83       	std	Z+2, r26	; 0x02
    1552:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1554:	8e 01       	movw	r16, r28
    1556:	0e 5a       	subi	r16, 0xAE	; 174
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	ce 01       	movw	r24, r28
    155c:	82 5b       	subi	r24, 0xB2	; 178
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a e7       	ldi	r20, 0x7A	; 122
    1566:	53 e4       	ldi	r21, 0x43	; 67
    1568:	fc 01       	movw	r30, r24
    156a:	60 81       	ld	r22, Z
    156c:	71 81       	ldd	r23, Z+1	; 0x01
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	f8 01       	movw	r30, r16
    157c:	80 83       	st	Z, r24
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	a2 83       	std	Z+2, r26	; 0x02
    1582:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1584:	ce 01       	movw	r24, r28
    1586:	8e 5a       	subi	r24, 0xAE	; 174
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	fc 01       	movw	r30, r24
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    15a0:	88 23       	and	r24, r24
    15a2:	4c f4       	brge	.+18     	; 0x15b6 <lcd_init+0x160>
		__ticks = 1;
    15a4:	ce 01       	movw	r24, r28
    15a6:	8a 5a       	subi	r24, 0xAA	; 170
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	21 e0       	ldi	r18, 0x01	; 1
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	fc 01       	movw	r30, r24
    15b0:	31 83       	std	Z+1, r19	; 0x01
    15b2:	20 83       	st	Z, r18
    15b4:	6d c0       	rjmp	.+218    	; 0x1690 <lcd_init+0x23a>
	else if (__tmp > 65535)
    15b6:	ce 01       	movw	r24, r28
    15b8:	8e 5a       	subi	r24, 0xAE	; 174
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	fc 01       	movw	r30, r24
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <lcd_init+0x182>
    15d6:	4a c0       	rjmp	.+148    	; 0x166c <lcd_init+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d8:	ce 01       	movw	r24, r28
    15da:	82 5b       	subi	r24, 0xB2	; 178
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	fc 01       	movw	r30, r24
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	8e 01       	movw	r16, r28
    15fa:	0a 5a       	subi	r16, 0xAA	; 170
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	f8 01       	movw	r30, r16
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
    1610:	24 c0       	rjmp	.+72     	; 0x165a <lcd_init+0x204>
    1612:	ce 01       	movw	r24, r28
    1614:	88 5a       	subi	r24, 0xA8	; 168
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	29 e1       	ldi	r18, 0x19	; 25
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	fc 01       	movw	r30, r24
    161e:	31 83       	std	Z+1, r19	; 0x01
    1620:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1622:	ce 01       	movw	r24, r28
    1624:	88 5a       	subi	r24, 0xA8	; 168
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	fc 01       	movw	r30, r24
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <lcd_init+0x1d8>
    1632:	9e 01       	movw	r18, r28
    1634:	28 5a       	subi	r18, 0xA8	; 168
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	f9 01       	movw	r30, r18
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	ce 01       	movw	r24, r28
    1640:	8a 5a       	subi	r24, 0xAA	; 170
    1642:	9f 4f       	sbci	r25, 0xFF	; 255
    1644:	9e 01       	movw	r18, r28
    1646:	2a 5a       	subi	r18, 0xAA	; 170
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	f9 01       	movw	r30, r18
    164c:	20 81       	ld	r18, Z
    164e:	31 81       	ldd	r19, Z+1	; 0x01
    1650:	21 50       	subi	r18, 0x01	; 1
    1652:	31 09       	sbc	r19, r1
    1654:	fc 01       	movw	r30, r24
    1656:	31 83       	std	Z+1, r19	; 0x01
    1658:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165a:	ce 01       	movw	r24, r28
    165c:	8a 5a       	subi	r24, 0xAA	; 170
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	fc 01       	movw	r30, r24
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	89 2b       	or	r24, r25
    1668:	a1 f6       	brne	.-88     	; 0x1612 <lcd_init+0x1bc>
    166a:	7b c0       	rjmp	.+246    	; 0x1762 <lcd_init+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166c:	8e 01       	movw	r16, r28
    166e:	0a 5a       	subi	r16, 0xAA	; 170
    1670:	1f 4f       	sbci	r17, 0xFF	; 255
    1672:	ce 01       	movw	r24, r28
    1674:	8e 5a       	subi	r24, 0xAE	; 174
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	fc 01       	movw	r30, r24
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	f8 01       	movw	r30, r16
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	ce 01       	movw	r24, r28
    1692:	86 5a       	subi	r24, 0xA6	; 166
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	9e 01       	movw	r18, r28
    1698:	2a 5a       	subi	r18, 0xAA	; 170
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	f9 01       	movw	r30, r18
    169e:	20 81       	ld	r18, Z
    16a0:	31 81       	ldd	r19, Z+1	; 0x01
    16a2:	fc 01       	movw	r30, r24
    16a4:	31 83       	std	Z+1, r19	; 0x01
    16a6:	20 83       	st	Z, r18
    16a8:	ce 01       	movw	r24, r28
    16aa:	86 5a       	subi	r24, 0xA6	; 166
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	fc 01       	movw	r30, r24
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <lcd_init+0x25e>
    16b8:	9e 01       	movw	r18, r28
    16ba:	26 5a       	subi	r18, 0xA6	; 166
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	f9 01       	movw	r30, r18
    16c0:	91 83       	std	Z+1, r25	; 0x01
    16c2:	80 83       	st	Z, r24
    16c4:	4e c0       	rjmp	.+156    	; 0x1762 <lcd_init+0x30c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    16c6:	ce 01       	movw	r24, r28
    16c8:	8b 5b       	subi	r24, 0xBB	; 187
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	53 e4       	ldi	r21, 0x43	; 67
    16d4:	fc 01       	movw	r30, r24
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	6c f5       	brge	.+90     	; 0x1740 <lcd_init+0x2ea>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    16e6:	8e 01       	movw	r16, r28
    16e8:	04 5a       	subi	r16, 0xA4	; 164
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	ce 01       	movw	r24, r28
    16ee:	87 5b       	subi	r24, 0xB7	; 183
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	fc 01       	movw	r30, r24
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	f8 01       	movw	r30, r16
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	ce 01       	movw	r24, r28
    170c:	82 5a       	subi	r24, 0xA2	; 162
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	9e 01       	movw	r18, r28
    1712:	24 5a       	subi	r18, 0xA4	; 164
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	f9 01       	movw	r30, r18
    1718:	20 81       	ld	r18, Z
    171a:	31 81       	ldd	r19, Z+1	; 0x01
    171c:	fc 01       	movw	r30, r24
    171e:	31 83       	std	Z+1, r19	; 0x01
    1720:	20 83       	st	Z, r18
    1722:	ce 01       	movw	r24, r28
    1724:	82 5a       	subi	r24, 0xA2	; 162
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	fc 01       	movw	r30, r24
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <lcd_init+0x2d8>
    1732:	9e 01       	movw	r18, r28
    1734:	22 5a       	subi	r18, 0xA2	; 162
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	f9 01       	movw	r30, r18
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
    173e:	28 c0       	rjmp	.+80     	; 0x1790 <lcd_init+0x33a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1740:	8e 01       	movw	r16, r28
    1742:	03 5b       	subi	r16, 0xB3	; 179
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	ce 01       	movw	r24, r28
    1748:	8b 5b       	subi	r24, 0xBB	; 187
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	fc 01       	movw	r30, r24
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	82 81       	ldd	r24, Z+2	; 0x02
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	f8 01       	movw	r30, r16
    1760:	80 83       	st	Z, r24
    1762:	ce 01       	movw	r24, r28
    1764:	80 5a       	subi	r24, 0xA0	; 160
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	9e 01       	movw	r18, r28
    176a:	23 5b       	subi	r18, 0xB3	; 179
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	f9 01       	movw	r30, r18
    1770:	20 81       	ld	r18, Z
    1772:	fc 01       	movw	r30, r24
    1774:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1776:	ce 01       	movw	r24, r28
    1778:	80 5a       	subi	r24, 0xA0	; 160
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	fc 01       	movw	r30, r24
    177e:	80 81       	ld	r24, Z
    1780:	28 2f       	mov	r18, r24
    1782:	2a 95       	dec	r18
    1784:	f1 f7       	brne	.-4      	; 0x1782 <lcd_init+0x32c>
    1786:	ce 01       	movw	r24, r28
    1788:	80 5a       	subi	r24, 0xA0	; 160
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	fc 01       	movw	r30, r24
    178e:	20 83       	st	Z, r18
  _delay_us(37);
  hd44780_outcmd(HD44780_ENTMODE(1, 0));//Entry mode: auto-increment address counter, no display shift in effect.
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	86 e0       	ldi	r24, 0x06	; 6
    1794:	0e 94 1a 02 	call	0x434	; 0x434 <hd44780_outbyte>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a4 e1       	ldi	r26, 0x14	; 20
    179e:	b2 e4       	ldi	r27, 0x42	; 66
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	af 83       	std	Y+7, r26	; 0x07
    17a6:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    17a8:	2b ea       	ldi	r18, 0xAB	; 171
    17aa:	3a ea       	ldi	r19, 0xAA	; 170
    17ac:	4a ea       	ldi	r20, 0xAA	; 170
    17ae:	5e e3       	ldi	r21, 0x3E	; 62
    17b0:	6d 81       	ldd	r22, Y+5	; 0x05
    17b2:	7e 81       	ldd	r23, Y+6	; 0x06
    17b4:	8f 81       	ldd	r24, Y+7	; 0x07
    17b6:	98 85       	ldd	r25, Y+8	; 0x08
    17b8:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	89 a7       	std	Y+41, r24	; 0x29
    17c2:	9a a7       	std	Y+42, r25	; 0x2a
    17c4:	ab a7       	std	Y+43, r26	; 0x2b
    17c6:	bc a7       	std	Y+44, r27	; 0x2c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5e e3       	ldi	r21, 0x3E	; 62
    17d0:	6d 81       	ldd	r22, Y+5	; 0x05
    17d2:	7e 81       	ldd	r23, Y+6	; 0x06
    17d4:	8f 81       	ldd	r24, Y+7	; 0x07
    17d6:	98 85       	ldd	r25, Y+8	; 0x08
    17d8:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8d a7       	std	Y+45, r24	; 0x2d
    17e2:	9e a7       	std	Y+46, r25	; 0x2e
    17e4:	af a7       	std	Y+47, r26	; 0x2f
    17e6:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	69 a5       	ldd	r22, Y+41	; 0x29
    17f2:	7a a5       	ldd	r23, Y+42	; 0x2a
    17f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	1c f4       	brge	.+6      	; 0x1806 <lcd_init+0x3b0>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	89 ab       	std	Y+49, r24	; 0x31
    1804:	c6 c0       	rjmp	.+396    	; 0x1992 <lcd_init+0x53c>
	else if (__tmp2 > 65535)
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	3f ef       	ldi	r19, 0xFF	; 255
    180a:	4f e7       	ldi	r20, 0x7F	; 127
    180c:	57 e4       	ldi	r21, 0x47	; 71
    180e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1810:	7e a5       	ldd	r23, Y+46	; 0x2e
    1812:	8f a5       	ldd	r24, Y+47	; 0x2f
    1814:	98 a9       	ldd	r25, Y+48	; 0x30
    1816:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    181a:	18 16       	cp	r1, r24
    181c:	0c f0       	brlt	.+2      	; 0x1820 <lcd_init+0x3ca>
    181e:	7b c0       	rjmp	.+246    	; 0x1916 <lcd_init+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4a e7       	ldi	r20, 0x7A	; 122
    1826:	54 e4       	ldi	r21, 0x44	; 68
    1828:	6d 81       	ldd	r22, Y+5	; 0x05
    182a:	7e 81       	ldd	r23, Y+6	; 0x06
    182c:	8f 81       	ldd	r24, Y+7	; 0x07
    182e:	98 85       	ldd	r25, Y+8	; 0x08
    1830:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	8a ab       	std	Y+50, r24	; 0x32
    183a:	9b ab       	std	Y+51, r25	; 0x33
    183c:	ac ab       	std	Y+52, r26	; 0x34
    183e:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a e7       	ldi	r20, 0x7A	; 122
    1846:	53 e4       	ldi	r21, 0x43	; 67
    1848:	6a a9       	ldd	r22, Y+50	; 0x32
    184a:	7b a9       	ldd	r23, Y+51	; 0x33
    184c:	8c a9       	ldd	r24, Y+52	; 0x34
    184e:	9d a9       	ldd	r25, Y+53	; 0x35
    1850:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	8e ab       	std	Y+54, r24	; 0x36
    185a:	9f ab       	std	Y+55, r25	; 0x37
    185c:	a8 af       	std	Y+56, r26	; 0x38
    185e:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	6e a9       	ldd	r22, Y+54	; 0x36
    186a:	7f a9       	ldd	r23, Y+55	; 0x37
    186c:	88 ad       	ldd	r24, Y+56	; 0x38
    186e:	99 ad       	ldd	r25, Y+57	; 0x39
    1870:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1874:	88 23       	and	r24, r24
    1876:	2c f4       	brge	.+10     	; 0x1882 <lcd_init+0x42c>
		__ticks = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	9b af       	std	Y+59, r25	; 0x3b
    187e:	8a af       	std	Y+58, r24	; 0x3a
    1880:	3f c0       	rjmp	.+126    	; 0x1900 <lcd_init+0x4aa>
	else if (__tmp > 65535)
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	4f e7       	ldi	r20, 0x7F	; 127
    1888:	57 e4       	ldi	r21, 0x47	; 71
    188a:	6e a9       	ldd	r22, Y+54	; 0x36
    188c:	7f a9       	ldd	r23, Y+55	; 0x37
    188e:	88 ad       	ldd	r24, Y+56	; 0x38
    1890:	99 ad       	ldd	r25, Y+57	; 0x39
    1892:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    1896:	18 16       	cp	r1, r24
    1898:	4c f5       	brge	.+82     	; 0x18ec <lcd_init+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	6a a9       	ldd	r22, Y+50	; 0x32
    18a4:	7b a9       	ldd	r23, Y+51	; 0x33
    18a6:	8c a9       	ldd	r24, Y+52	; 0x34
    18a8:	9d a9       	ldd	r25, Y+53	; 0x35
    18aa:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9b af       	std	Y+59, r25	; 0x3b
    18c0:	8a af       	std	Y+58, r24	; 0x3a
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <lcd_init+0x48c>
    18c4:	89 e1       	ldi	r24, 0x19	; 25
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9d af       	std	Y+61, r25	; 0x3d
    18ca:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18cc:	8c ad       	ldd	r24, Y+60	; 0x3c
    18ce:	9d ad       	ldd	r25, Y+61	; 0x3d
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <lcd_init+0x47a>
    18d4:	9d af       	std	Y+61, r25	; 0x3d
    18d6:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    18da:	9b ad       	ldd	r25, Y+59	; 0x3b
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	9b af       	std	Y+59, r25	; 0x3b
    18e0:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    18e4:	9b ad       	ldd	r25, Y+59	; 0x3b
    18e6:	89 2b       	or	r24, r25
    18e8:	69 f7       	brne	.-38     	; 0x18c4 <lcd_init+0x46e>
    18ea:	53 c0       	rjmp	.+166    	; 0x1992 <lcd_init+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ec:	6e a9       	ldd	r22, Y+54	; 0x36
    18ee:	7f a9       	ldd	r23, Y+55	; 0x37
    18f0:	88 ad       	ldd	r24, Y+56	; 0x38
    18f2:	99 ad       	ldd	r25, Y+57	; 0x39
    18f4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	9b af       	std	Y+59, r25	; 0x3b
    18fe:	8a af       	std	Y+58, r24	; 0x3a
    1900:	8a ad       	ldd	r24, Y+58	; 0x3a
    1902:	9b ad       	ldd	r25, Y+59	; 0x3b
    1904:	9f af       	std	Y+63, r25	; 0x3f
    1906:	8e af       	std	Y+62, r24	; 0x3e
    1908:	8e ad       	ldd	r24, Y+62	; 0x3e
    190a:	9f ad       	ldd	r25, Y+63	; 0x3f
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <lcd_init+0x4b6>
    1910:	9f af       	std	Y+63, r25	; 0x3f
    1912:	8e af       	std	Y+62, r24	; 0x3e
    1914:	3e c0       	rjmp	.+124    	; 0x1992 <lcd_init+0x53c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	53 e4       	ldi	r21, 0x43	; 67
    191e:	69 a5       	ldd	r22, Y+41	; 0x29
    1920:	7a a5       	ldd	r23, Y+42	; 0x2a
    1922:	8b a5       	ldd	r24, Y+43	; 0x2b
    1924:	9c a5       	ldd	r25, Y+44	; 0x2c
    1926:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <lcd_init+0x52a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    192e:	8e 01       	movw	r16, r28
    1930:	00 5c       	subi	r16, 0xC0	; 192
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	6d a5       	ldd	r22, Y+45	; 0x2d
    1936:	7e a5       	ldd	r23, Y+46	; 0x2e
    1938:	8f a5       	ldd	r24, Y+47	; 0x2f
    193a:	98 a9       	ldd	r25, Y+48	; 0x30
    193c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	f8 01       	movw	r30, r16
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	ce 01       	movw	r24, r28
    194c:	8e 5b       	subi	r24, 0xBE	; 190
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	9e 01       	movw	r18, r28
    1952:	20 5c       	subi	r18, 0xC0	; 192
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	f9 01       	movw	r30, r18
    1958:	20 81       	ld	r18, Z
    195a:	31 81       	ldd	r19, Z+1	; 0x01
    195c:	fc 01       	movw	r30, r24
    195e:	31 83       	std	Z+1, r19	; 0x01
    1960:	20 83       	st	Z, r18
    1962:	ce 01       	movw	r24, r28
    1964:	8e 5b       	subi	r24, 0xBE	; 190
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	fc 01       	movw	r30, r24
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <lcd_init+0x518>
    1972:	9e 01       	movw	r18, r28
    1974:	2e 5b       	subi	r18, 0xBE	; 190
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	f9 01       	movw	r30, r18
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
    197e:	1c c0       	rjmp	.+56     	; 0x19b8 <lcd_init+0x562>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1980:	69 a5       	ldd	r22, Y+41	; 0x29
    1982:	7a a5       	ldd	r23, Y+42	; 0x2a
    1984:	8b a5       	ldd	r24, Y+43	; 0x2b
    1986:	9c a5       	ldd	r25, Y+44	; 0x2c
    1988:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	89 ab       	std	Y+49, r24	; 0x31
    1992:	ce 01       	movw	r24, r28
    1994:	8c 5b       	subi	r24, 0xBC	; 188
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	29 a9       	ldd	r18, Y+49	; 0x31
    199a:	fc 01       	movw	r30, r24
    199c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    199e:	ce 01       	movw	r24, r28
    19a0:	8c 5b       	subi	r24, 0xBC	; 188
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
    19a4:	fc 01       	movw	r30, r24
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	2a 95       	dec	r18
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <lcd_init+0x554>
    19ae:	ce 01       	movw	r24, r28
    19b0:	8c 5b       	subi	r24, 0xBC	; 188
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	fc 01       	movw	r30, r24
    19b6:	20 83       	st	Z, r18
  _delay_us(37);
  hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));//Enable display, activate non-blinking cursor.
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	8e e0       	ldi	r24, 0x0E	; 14
    19bc:	0e 94 1a 02 	call	0x434	; 0x434 <hd44780_outbyte>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a4 e1       	ldi	r26, 0x14	; 20
    19c6:	b2 e4       	ldi	r27, 0x42	; 66
    19c8:	89 87       	std	Y+9, r24	; 0x09
    19ca:	9a 87       	std	Y+10, r25	; 0x0a
    19cc:	ab 87       	std	Y+11, r26	; 0x0b
    19ce:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    19d0:	2b ea       	ldi	r18, 0xAB	; 171
    19d2:	3a ea       	ldi	r19, 0xAA	; 170
    19d4:	4a ea       	ldi	r20, 0xAA	; 170
    19d6:	5e e3       	ldi	r21, 0x3E	; 62
    19d8:	69 85       	ldd	r22, Y+9	; 0x09
    19da:	7a 85       	ldd	r23, Y+10	; 0x0a
    19dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    19de:	9c 85       	ldd	r25, Y+12	; 0x0c
    19e0:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8d 87       	std	Y+13, r24	; 0x0d
    19ea:	9e 87       	std	Y+14, r25	; 0x0e
    19ec:	af 87       	std	Y+15, r26	; 0x0f
    19ee:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5e e3       	ldi	r21, 0x3E	; 62
    19f8:	69 85       	ldd	r22, Y+9	; 0x09
    19fa:	7a 85       	ldd	r23, Y+10	; 0x0a
    19fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a00:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	89 8b       	std	Y+17, r24	; 0x11
    1a0a:	9a 8b       	std	Y+18, r25	; 0x12
    1a0c:	ab 8b       	std	Y+19, r26	; 0x13
    1a0e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a1a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1e:	98 89       	ldd	r25, Y+16	; 0x10
    1a20:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1a24:	88 23       	and	r24, r24
    1a26:	1c f4       	brge	.+6      	; 0x1a2e <lcd_init+0x5d8>
		__ticks = 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	8d 8b       	std	Y+21, r24	; 0x15
    1a2c:	b2 c0       	rjmp	.+356    	; 0x1b92 <lcd_init+0x73c>
	else if (__tmp2 > 65535)
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	69 89       	ldd	r22, Y+17	; 0x11
    1a38:	7a 89       	ldd	r23, Y+18	; 0x12
    1a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3e:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	0c f0       	brlt	.+2      	; 0x1a48 <lcd_init+0x5f2>
    1a46:	7b c0       	rjmp	.+246    	; 0x1b3e <lcd_init+0x6e8>
	{
		_delay_ms(__us / 1000.0);
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a e7       	ldi	r20, 0x7A	; 122
    1a4e:	54 e4       	ldi	r21, 0x44	; 68
    1a50:	69 85       	ldd	r22, Y+9	; 0x09
    1a52:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a54:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a56:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a58:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8e 8b       	std	Y+22, r24	; 0x16
    1a62:	9f 8b       	std	Y+23, r25	; 0x17
    1a64:	a8 8f       	std	Y+24, r26	; 0x18
    1a66:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a e7       	ldi	r20, 0x7A	; 122
    1a6e:	53 e4       	ldi	r21, 0x43	; 67
    1a70:	6e 89       	ldd	r22, Y+22	; 0x16
    1a72:	7f 89       	ldd	r23, Y+23	; 0x17
    1a74:	88 8d       	ldd	r24, Y+24	; 0x18
    1a76:	99 8d       	ldd	r25, Y+25	; 0x19
    1a78:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8a 8f       	std	Y+26, r24	; 0x1a
    1a82:	9b 8f       	std	Y+27, r25	; 0x1b
    1a84:	ac 8f       	std	Y+28, r26	; 0x1c
    1a86:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a92:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a96:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a98:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <lcd_init+0x654>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9f 8f       	std	Y+31, r25	; 0x1f
    1aa6:	8e 8f       	std	Y+30, r24	; 0x1e
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <lcd_init+0x6d2>
	else if (__tmp > 65535)
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ab4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ab6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ab8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aba:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <lcd_init+0x6be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e2       	ldi	r20, 0x20	; 32
    1ac8:	51 e4       	ldi	r21, 0x41	; 65
    1aca:	6e 89       	ldd	r22, Y+22	; 0x16
    1acc:	7f 89       	ldd	r23, Y+23	; 0x17
    1ace:	88 8d       	ldd	r24, Y+24	; 0x18
    1ad0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ad2:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9f 8f       	std	Y+31, r25	; 0x1f
    1ae8:	8e 8f       	std	Y+30, r24	; 0x1e
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <lcd_init+0x6b4>
    1aec:	89 e1       	ldi	r24, 0x19	; 25
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	99 a3       	std	Y+33, r25	; 0x21
    1af2:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af4:	88 a1       	ldd	r24, Y+32	; 0x20
    1af6:	99 a1       	ldd	r25, Y+33	; 0x21
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <lcd_init+0x6a2>
    1afc:	99 a3       	std	Y+33, r25	; 0x21
    1afe:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9f 8f       	std	Y+31, r25	; 0x1f
    1b08:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b0e:	89 2b       	or	r24, r25
    1b10:	69 f7       	brne	.-38     	; 0x1aec <lcd_init+0x696>
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <lcd_init+0x73c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b16:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b18:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b1c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9f 8f       	std	Y+31, r25	; 0x1f
    1b26:	8e 8f       	std	Y+30, r24	; 0x1e
    1b28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b2c:	9b a3       	std	Y+35, r25	; 0x23
    1b2e:	8a a3       	std	Y+34, r24	; 0x22
    1b30:	8a a1       	ldd	r24, Y+34	; 0x22
    1b32:	9b a1       	ldd	r25, Y+35	; 0x23
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <lcd_init+0x6de>
    1b38:	9b a3       	std	Y+35, r25	; 0x23
    1b3a:	8a a3       	std	Y+34, r24	; 0x22
    1b3c:	2a c0       	rjmp	.+84     	; 0x1b92 <lcd_init+0x73c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	53 e4       	ldi	r21, 0x43	; 67
    1b46:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b48:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4c:	98 89       	ldd	r25, Y+16	; 0x10
    1b4e:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	ac f4       	brge	.+42     	; 0x1b80 <lcd_init+0x72a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1b56:	69 89       	ldd	r22, Y+17	; 0x11
    1b58:	7a 89       	ldd	r23, Y+18	; 0x12
    1b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9d a3       	std	Y+37, r25	; 0x25
    1b68:	8c a3       	std	Y+36, r24	; 0x24
    1b6a:	8c a1       	ldd	r24, Y+36	; 0x24
    1b6c:	9d a1       	ldd	r25, Y+37	; 0x25
    1b6e:	9f a3       	std	Y+39, r25	; 0x27
    1b70:	8e a3       	std	Y+38, r24	; 0x26
    1b72:	8e a1       	ldd	r24, Y+38	; 0x26
    1b74:	9f a1       	ldd	r25, Y+39	; 0x27
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <lcd_init+0x720>
    1b7a:	9f a3       	std	Y+39, r25	; 0x27
    1b7c:	8e a3       	std	Y+38, r24	; 0x26
  _delay_us(37);
}
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <lcd_init+0x748>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b80:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b82:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b86:	98 89       	ldd	r25, Y+16	; 0x10
    1b88:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8d 8b       	std	Y+21, r24	; 0x15
    1b92:	8d 89       	ldd	r24, Y+21	; 0x15
    1b94:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b96:	88 a5       	ldd	r24, Y+40	; 0x28
    1b98:	8a 95       	dec	r24
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <lcd_init+0x742>
    1b9c:	88 a7       	std	Y+40, r24	; 0x28
    1b9e:	00 00       	nop
    1ba0:	c0 5a       	subi	r28, 0xA0	; 160
    1ba2:	df 4f       	sbci	r29, 0xFF	; 255
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	08 95       	ret

00001bb8 <lcd_putchar>:
 * Send character c to the LCD display.  After a '\n' has been seen,
 * the next character will first clear the display.
 */
int
lcd_putchar(char c)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	a1 97       	sbiw	r28, 0x21	; 33
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	89 a3       	std	Y+33, r24	; 0x21
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a4 e1       	ldi	r26, 0x14	; 20
    1bd4:	b2 e4       	ldi	r27, 0x42	; 66
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	ab 83       	std	Y+3, r26	; 0x03
    1bdc:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1bde:	2b ea       	ldi	r18, 0xAB	; 171
    1be0:	3a ea       	ldi	r19, 0xAA	; 170
    1be2:	4a ea       	ldi	r20, 0xAA	; 170
    1be4:	5e e3       	ldi	r21, 0x3E	; 62
    1be6:	69 81       	ldd	r22, Y+1	; 0x01
    1be8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	af 83       	std	Y+7, r26	; 0x07
    1bfc:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5e e3       	ldi	r21, 0x3E	; 62
    1c06:	69 81       	ldd	r22, Y+1	; 0x01
    1c08:	7a 81       	ldd	r23, Y+2	; 0x02
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	89 87       	std	Y+9, r24	; 0x09
    1c18:	9a 87       	std	Y+10, r25	; 0x0a
    1c1a:	ab 87       	std	Y+11, r26	; 0x0b
    1c1c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	6d 81       	ldd	r22, Y+5	; 0x05
    1c28:	7e 81       	ldd	r23, Y+6	; 0x06
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	98 85       	ldd	r25, Y+8	; 0x08
    1c2e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	1c f4       	brge	.+6      	; 0x1c3c <lcd_putchar+0x84>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	8d 87       	std	Y+13, r24	; 0x0d
    1c3a:	b2 c0       	rjmp	.+356    	; 0x1da0 <lcd_putchar+0x1e8>
	else if (__tmp2 > 65535)
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	69 85       	ldd	r22, Y+9	; 0x09
    1c46:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c48:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c4c:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	0c f0       	brlt	.+2      	; 0x1c56 <lcd_putchar+0x9e>
    1c54:	7b c0       	rjmp	.+246    	; 0x1d4c <lcd_putchar+0x194>
	{
		_delay_ms(__us / 1000.0);
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a e7       	ldi	r20, 0x7A	; 122
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	69 81       	ldd	r22, Y+1	; 0x01
    1c60:	7a 81       	ldd	r23, Y+2	; 0x02
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	8e 87       	std	Y+14, r24	; 0x0e
    1c70:	9f 87       	std	Y+15, r25	; 0x0f
    1c72:	a8 8b       	std	Y+16, r26	; 0x10
    1c74:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a e7       	ldi	r20, 0x7A	; 122
    1c7c:	53 e4       	ldi	r21, 0x43	; 67
    1c7e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c80:	7f 85       	ldd	r23, Y+15	; 0x0f
    1c82:	88 89       	ldd	r24, Y+16	; 0x10
    1c84:	99 89       	ldd	r25, Y+17	; 0x11
    1c86:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8a 8b       	std	Y+18, r24	; 0x12
    1c90:	9b 8b       	std	Y+19, r25	; 0x13
    1c92:	ac 8b       	std	Y+20, r26	; 0x14
    1c94:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	6a 89       	ldd	r22, Y+18	; 0x12
    1ca0:	7b 89       	ldd	r23, Y+19	; 0x13
    1ca2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ca4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ca6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <lcd_putchar+0x100>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9f 8b       	std	Y+23, r25	; 0x17
    1cb4:	8e 8b       	std	Y+22, r24	; 0x16
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <lcd_putchar+0x17e>
	else if (__tmp > 65535)
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	6a 89       	ldd	r22, Y+18	; 0x12
    1cc2:	7b 89       	ldd	r23, Y+19	; 0x13
    1cc4:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc6:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc8:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <lcd_putchar+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	6e 85       	ldd	r22, Y+14	; 0x0e
    1cda:	7f 85       	ldd	r23, Y+15	; 0x0f
    1cdc:	88 89       	ldd	r24, Y+16	; 0x10
    1cde:	99 89       	ldd	r25, Y+17	; 0x11
    1ce0:	0e 94 05 10 	call	0x200a	; 0x200a <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9f 8b       	std	Y+23, r25	; 0x17
    1cf6:	8e 8b       	std	Y+22, r24	; 0x16
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <lcd_putchar+0x160>
    1cfa:	89 e1       	ldi	r24, 0x19	; 25
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	99 8f       	std	Y+25, r25	; 0x19
    1d00:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d02:	88 8d       	ldd	r24, Y+24	; 0x18
    1d04:	99 8d       	ldd	r25, Y+25	; 0x19
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <lcd_putchar+0x14e>
    1d0a:	99 8f       	std	Y+25, r25	; 0x19
    1d0c:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d10:	9f 89       	ldd	r25, Y+23	; 0x17
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9f 8b       	std	Y+23, r25	; 0x17
    1d16:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8e 89       	ldd	r24, Y+22	; 0x16
    1d1a:	9f 89       	ldd	r25, Y+23	; 0x17
    1d1c:	89 2b       	or	r24, r25
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <lcd_putchar+0x142>
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <lcd_putchar+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6a 89       	ldd	r22, Y+18	; 0x12
    1d24:	7b 89       	ldd	r23, Y+19	; 0x13
    1d26:	8c 89       	ldd	r24, Y+20	; 0x14
    1d28:	9d 89       	ldd	r25, Y+21	; 0x15
    1d2a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9f 8b       	std	Y+23, r25	; 0x17
    1d34:	8e 8b       	std	Y+22, r24	; 0x16
    1d36:	8e 89       	ldd	r24, Y+22	; 0x16
    1d38:	9f 89       	ldd	r25, Y+23	; 0x17
    1d3a:	9b 8f       	std	Y+27, r25	; 0x1b
    1d3c:	8a 8f       	std	Y+26, r24	; 0x1a
    1d3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <lcd_putchar+0x18a>
    1d46:	9b 8f       	std	Y+27, r25	; 0x1b
    1d48:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4a:	2a c0       	rjmp	.+84     	; 0x1da0 <lcd_putchar+0x1e8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	53 e4       	ldi	r21, 0x43	; 67
    1d54:	6d 81       	ldd	r22, Y+5	; 0x05
    1d56:	7e 81       	ldd	r23, Y+6	; 0x06
    1d58:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5a:	98 85       	ldd	r25, Y+8	; 0x08
    1d5c:	0e 94 00 10 	call	0x2000	; 0x2000 <__gesf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	ac f4       	brge	.+42     	; 0x1d8e <lcd_putchar+0x1d6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1d64:	69 85       	ldd	r22, Y+9	; 0x09
    1d66:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d68:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d6c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9d 8f       	std	Y+29, r25	; 0x1d
    1d76:	8c 8f       	std	Y+28, r24	; 0x1c
    1d78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d7c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d82:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <lcd_putchar+0x1cc>
    1d88:	9f 8f       	std	Y+31, r25	; 0x1f
    1d8a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <lcd_putchar+0x1f4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d8e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d90:	7e 81       	ldd	r23, Y+6	; 0x06
    1d92:	8f 81       	ldd	r24, Y+7	; 0x07
    1d94:	98 85       	ldd	r25, Y+8	; 0x08
    1d96:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8d 87       	std	Y+13, r24	; 0x0d
    1da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da2:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1da4:	88 a1       	ldd	r24, Y+32	; 0x20
    1da6:	8a 95       	dec	r24
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <lcd_putchar+0x1ee>
    1daa:	88 a3       	std	Y+32, r24	; 0x20
	 _delay_us(37);
	 hd44780_outdata(c);
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	89 a1       	ldd	r24, Y+33	; 0x21
    1db0:	0e 94 1a 02 	call	0x434	; 0x434 <hd44780_outbyte>
	 return 0;
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
}
    1db8:	a1 96       	adiw	r28, 0x21	; 33
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <__cmpsf2>:
    1dca:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__fp_cmp>
    1dce:	08 f4       	brcc	.+2      	; 0x1dd2 <__cmpsf2+0x8>
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	08 95       	ret

00001dd4 <__divsf3>:
    1dd4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__divsf3x>
    1dd8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__fp_round>
    1ddc:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__fp_pscB>
    1de0:	58 f0       	brcs	.+22     	; 0x1df8 <__divsf3+0x24>
    1de2:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__fp_pscA>
    1de6:	40 f0       	brcs	.+16     	; 0x1df8 <__divsf3+0x24>
    1de8:	29 f4       	brne	.+10     	; 0x1df4 <__divsf3+0x20>
    1dea:	5f 3f       	cpi	r21, 0xFF	; 255
    1dec:	29 f0       	breq	.+10     	; 0x1df8 <__divsf3+0x24>
    1dee:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__fp_inf>
    1df2:	51 11       	cpse	r21, r1
    1df4:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__fp_szero>
    1df8:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__fp_nan>

00001dfc <__divsf3x>:
    1dfc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__fp_split3>
    1e00:	68 f3       	brcs	.-38     	; 0x1ddc <__divsf3+0x8>

00001e02 <__divsf3_pse>:
    1e02:	99 23       	and	r25, r25
    1e04:	b1 f3       	breq	.-20     	; 0x1df2 <__divsf3+0x1e>
    1e06:	55 23       	and	r21, r21
    1e08:	91 f3       	breq	.-28     	; 0x1dee <__divsf3+0x1a>
    1e0a:	95 1b       	sub	r25, r21
    1e0c:	55 0b       	sbc	r21, r21
    1e0e:	bb 27       	eor	r27, r27
    1e10:	aa 27       	eor	r26, r26
    1e12:	62 17       	cp	r22, r18
    1e14:	73 07       	cpc	r23, r19
    1e16:	84 07       	cpc	r24, r20
    1e18:	38 f0       	brcs	.+14     	; 0x1e28 <__divsf3_pse+0x26>
    1e1a:	9f 5f       	subi	r25, 0xFF	; 255
    1e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1e:	22 0f       	add	r18, r18
    1e20:	33 1f       	adc	r19, r19
    1e22:	44 1f       	adc	r20, r20
    1e24:	aa 1f       	adc	r26, r26
    1e26:	a9 f3       	breq	.-22     	; 0x1e12 <__divsf3_pse+0x10>
    1e28:	35 d0       	rcall	.+106    	; 0x1e94 <__divsf3_pse+0x92>
    1e2a:	0e 2e       	mov	r0, r30
    1e2c:	3a f0       	brmi	.+14     	; 0x1e3c <__divsf3_pse+0x3a>
    1e2e:	e0 e8       	ldi	r30, 0x80	; 128
    1e30:	32 d0       	rcall	.+100    	; 0x1e96 <__divsf3_pse+0x94>
    1e32:	91 50       	subi	r25, 0x01	; 1
    1e34:	50 40       	sbci	r21, 0x00	; 0
    1e36:	e6 95       	lsr	r30
    1e38:	00 1c       	adc	r0, r0
    1e3a:	ca f7       	brpl	.-14     	; 0x1e2e <__divsf3_pse+0x2c>
    1e3c:	2b d0       	rcall	.+86     	; 0x1e94 <__divsf3_pse+0x92>
    1e3e:	fe 2f       	mov	r31, r30
    1e40:	29 d0       	rcall	.+82     	; 0x1e94 <__divsf3_pse+0x92>
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	bb 1f       	adc	r27, r27
    1e4a:	26 17       	cp	r18, r22
    1e4c:	37 07       	cpc	r19, r23
    1e4e:	48 07       	cpc	r20, r24
    1e50:	ab 07       	cpc	r26, r27
    1e52:	b0 e8       	ldi	r27, 0x80	; 128
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <__divsf3_pse+0x56>
    1e56:	bb 0b       	sbc	r27, r27
    1e58:	80 2d       	mov	r24, r0
    1e5a:	bf 01       	movw	r22, r30
    1e5c:	ff 27       	eor	r31, r31
    1e5e:	93 58       	subi	r25, 0x83	; 131
    1e60:	5f 4f       	sbci	r21, 0xFF	; 255
    1e62:	3a f0       	brmi	.+14     	; 0x1e72 <__divsf3_pse+0x70>
    1e64:	9e 3f       	cpi	r25, 0xFE	; 254
    1e66:	51 05       	cpc	r21, r1
    1e68:	78 f0       	brcs	.+30     	; 0x1e88 <__divsf3_pse+0x86>
    1e6a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__fp_inf>
    1e6e:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__fp_szero>
    1e72:	5f 3f       	cpi	r21, 0xFF	; 255
    1e74:	e4 f3       	brlt	.-8      	; 0x1e6e <__divsf3_pse+0x6c>
    1e76:	98 3e       	cpi	r25, 0xE8	; 232
    1e78:	d4 f3       	brlt	.-12     	; 0x1e6e <__divsf3_pse+0x6c>
    1e7a:	86 95       	lsr	r24
    1e7c:	77 95       	ror	r23
    1e7e:	67 95       	ror	r22
    1e80:	b7 95       	ror	r27
    1e82:	f7 95       	ror	r31
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__divsf3_pse+0x78>
    1e88:	88 0f       	add	r24, r24
    1e8a:	91 1d       	adc	r25, r1
    1e8c:	96 95       	lsr	r25
    1e8e:	87 95       	ror	r24
    1e90:	97 f9       	bld	r25, 7
    1e92:	08 95       	ret
    1e94:	e1 e0       	ldi	r30, 0x01	; 1
    1e96:	66 0f       	add	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	62 17       	cp	r22, r18
    1ea0:	73 07       	cpc	r23, r19
    1ea2:	84 07       	cpc	r24, r20
    1ea4:	ba 07       	cpc	r27, r26
    1ea6:	20 f0       	brcs	.+8      	; 0x1eb0 <__divsf3_pse+0xae>
    1ea8:	62 1b       	sub	r22, r18
    1eaa:	73 0b       	sbc	r23, r19
    1eac:	84 0b       	sbc	r24, r20
    1eae:	ba 0b       	sbc	r27, r26
    1eb0:	ee 1f       	adc	r30, r30
    1eb2:	88 f7       	brcc	.-30     	; 0x1e96 <__divsf3_pse+0x94>
    1eb4:	e0 95       	com	r30
    1eb6:	08 95       	ret

00001eb8 <__fixunssfsi>:
    1eb8:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fp_splitA>
    1ebc:	88 f0       	brcs	.+34     	; 0x1ee0 <__fixunssfsi+0x28>
    1ebe:	9f 57       	subi	r25, 0x7F	; 127
    1ec0:	98 f0       	brcs	.+38     	; 0x1ee8 <__fixunssfsi+0x30>
    1ec2:	b9 2f       	mov	r27, r25
    1ec4:	99 27       	eor	r25, r25
    1ec6:	b7 51       	subi	r27, 0x17	; 23
    1ec8:	b0 f0       	brcs	.+44     	; 0x1ef6 <__fixunssfsi+0x3e>
    1eca:	e1 f0       	breq	.+56     	; 0x1f04 <__fixunssfsi+0x4c>
    1ecc:	66 0f       	add	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	1a f0       	brmi	.+6      	; 0x1edc <__fixunssfsi+0x24>
    1ed6:	ba 95       	dec	r27
    1ed8:	c9 f7       	brne	.-14     	; 0x1ecc <__fixunssfsi+0x14>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <__fixunssfsi+0x4c>
    1edc:	b1 30       	cpi	r27, 0x01	; 1
    1ede:	91 f0       	breq	.+36     	; 0x1f04 <__fixunssfsi+0x4c>
    1ee0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__fp_zero>
    1ee4:	b1 e0       	ldi	r27, 0x01	; 1
    1ee6:	08 95       	ret
    1ee8:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__fp_zero>
    1eec:	67 2f       	mov	r22, r23
    1eee:	78 2f       	mov	r23, r24
    1ef0:	88 27       	eor	r24, r24
    1ef2:	b8 5f       	subi	r27, 0xF8	; 248
    1ef4:	39 f0       	breq	.+14     	; 0x1f04 <__fixunssfsi+0x4c>
    1ef6:	b9 3f       	cpi	r27, 0xF9	; 249
    1ef8:	cc f3       	brlt	.-14     	; 0x1eec <__fixunssfsi+0x34>
    1efa:	86 95       	lsr	r24
    1efc:	77 95       	ror	r23
    1efe:	67 95       	ror	r22
    1f00:	b3 95       	inc	r27
    1f02:	d9 f7       	brne	.-10     	; 0x1efa <__fixunssfsi+0x42>
    1f04:	3e f4       	brtc	.+14     	; 0x1f14 <__fixunssfsi+0x5c>
    1f06:	90 95       	com	r25
    1f08:	80 95       	com	r24
    1f0a:	70 95       	com	r23
    1f0c:	61 95       	neg	r22
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	8f 4f       	sbci	r24, 0xFF	; 255
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	08 95       	ret

00001f16 <__fp_cmp>:
    1f16:	99 0f       	add	r25, r25
    1f18:	00 08       	sbc	r0, r0
    1f1a:	55 0f       	add	r21, r21
    1f1c:	aa 0b       	sbc	r26, r26
    1f1e:	e0 e8       	ldi	r30, 0x80	; 128
    1f20:	fe ef       	ldi	r31, 0xFE	; 254
    1f22:	16 16       	cp	r1, r22
    1f24:	17 06       	cpc	r1, r23
    1f26:	e8 07       	cpc	r30, r24
    1f28:	f9 07       	cpc	r31, r25
    1f2a:	c0 f0       	brcs	.+48     	; 0x1f5c <__fp_cmp+0x46>
    1f2c:	12 16       	cp	r1, r18
    1f2e:	13 06       	cpc	r1, r19
    1f30:	e4 07       	cpc	r30, r20
    1f32:	f5 07       	cpc	r31, r21
    1f34:	98 f0       	brcs	.+38     	; 0x1f5c <__fp_cmp+0x46>
    1f36:	62 1b       	sub	r22, r18
    1f38:	73 0b       	sbc	r23, r19
    1f3a:	84 0b       	sbc	r24, r20
    1f3c:	95 0b       	sbc	r25, r21
    1f3e:	39 f4       	brne	.+14     	; 0x1f4e <__fp_cmp+0x38>
    1f40:	0a 26       	eor	r0, r26
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <__fp_cmp+0x46>
    1f44:	23 2b       	or	r18, r19
    1f46:	24 2b       	or	r18, r20
    1f48:	25 2b       	or	r18, r21
    1f4a:	21 f4       	brne	.+8      	; 0x1f54 <__fp_cmp+0x3e>
    1f4c:	08 95       	ret
    1f4e:	0a 26       	eor	r0, r26
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <__fp_cmp+0x3e>
    1f52:	a1 40       	sbci	r26, 0x01	; 1
    1f54:	a6 95       	lsr	r26
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	81 1d       	adc	r24, r1
    1f5a:	81 1d       	adc	r24, r1
    1f5c:	08 95       	ret

00001f5e <__fp_inf>:
    1f5e:	97 f9       	bld	r25, 7
    1f60:	9f 67       	ori	r25, 0x7F	; 127
    1f62:	80 e8       	ldi	r24, 0x80	; 128
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	08 95       	ret

00001f6a <__fp_nan>:
    1f6a:	9f ef       	ldi	r25, 0xFF	; 255
    1f6c:	80 ec       	ldi	r24, 0xC0	; 192
    1f6e:	08 95       	ret

00001f70 <__fp_pscA>:
    1f70:	00 24       	eor	r0, r0
    1f72:	0a 94       	dec	r0
    1f74:	16 16       	cp	r1, r22
    1f76:	17 06       	cpc	r1, r23
    1f78:	18 06       	cpc	r1, r24
    1f7a:	09 06       	cpc	r0, r25
    1f7c:	08 95       	ret

00001f7e <__fp_pscB>:
    1f7e:	00 24       	eor	r0, r0
    1f80:	0a 94       	dec	r0
    1f82:	12 16       	cp	r1, r18
    1f84:	13 06       	cpc	r1, r19
    1f86:	14 06       	cpc	r1, r20
    1f88:	05 06       	cpc	r0, r21
    1f8a:	08 95       	ret

00001f8c <__fp_round>:
    1f8c:	09 2e       	mov	r0, r25
    1f8e:	03 94       	inc	r0
    1f90:	00 0c       	add	r0, r0
    1f92:	11 f4       	brne	.+4      	; 0x1f98 <__fp_round+0xc>
    1f94:	88 23       	and	r24, r24
    1f96:	52 f0       	brmi	.+20     	; 0x1fac <__fp_round+0x20>
    1f98:	bb 0f       	add	r27, r27
    1f9a:	40 f4       	brcc	.+16     	; 0x1fac <__fp_round+0x20>
    1f9c:	bf 2b       	or	r27, r31
    1f9e:	11 f4       	brne	.+4      	; 0x1fa4 <__fp_round+0x18>
    1fa0:	60 ff       	sbrs	r22, 0
    1fa2:	04 c0       	rjmp	.+8      	; 0x1fac <__fp_round+0x20>
    1fa4:	6f 5f       	subi	r22, 0xFF	; 255
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1faa:	9f 4f       	sbci	r25, 0xFF	; 255
    1fac:	08 95       	ret

00001fae <__fp_split3>:
    1fae:	57 fd       	sbrc	r21, 7
    1fb0:	90 58       	subi	r25, 0x80	; 128
    1fb2:	44 0f       	add	r20, r20
    1fb4:	55 1f       	adc	r21, r21
    1fb6:	59 f0       	breq	.+22     	; 0x1fce <__fp_splitA+0x10>
    1fb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fba:	71 f0       	breq	.+28     	; 0x1fd8 <__fp_splitA+0x1a>
    1fbc:	47 95       	ror	r20

00001fbe <__fp_splitA>:
    1fbe:	88 0f       	add	r24, r24
    1fc0:	97 fb       	bst	r25, 7
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	61 f0       	breq	.+24     	; 0x1fde <__fp_splitA+0x20>
    1fc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc8:	79 f0       	breq	.+30     	; 0x1fe8 <__fp_splitA+0x2a>
    1fca:	87 95       	ror	r24
    1fcc:	08 95       	ret
    1fce:	12 16       	cp	r1, r18
    1fd0:	13 06       	cpc	r1, r19
    1fd2:	14 06       	cpc	r1, r20
    1fd4:	55 1f       	adc	r21, r21
    1fd6:	f2 cf       	rjmp	.-28     	; 0x1fbc <__fp_split3+0xe>
    1fd8:	46 95       	lsr	r20
    1fda:	f1 df       	rcall	.-30     	; 0x1fbe <__fp_splitA>
    1fdc:	08 c0       	rjmp	.+16     	; 0x1fee <__fp_splitA+0x30>
    1fde:	16 16       	cp	r1, r22
    1fe0:	17 06       	cpc	r1, r23
    1fe2:	18 06       	cpc	r1, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	f1 cf       	rjmp	.-30     	; 0x1fca <__fp_splitA+0xc>
    1fe8:	86 95       	lsr	r24
    1fea:	71 05       	cpc	r23, r1
    1fec:	61 05       	cpc	r22, r1
    1fee:	08 94       	sec
    1ff0:	08 95       	ret

00001ff2 <__fp_zero>:
    1ff2:	e8 94       	clt

00001ff4 <__fp_szero>:
    1ff4:	bb 27       	eor	r27, r27
    1ff6:	66 27       	eor	r22, r22
    1ff8:	77 27       	eor	r23, r23
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	97 f9       	bld	r25, 7
    1ffe:	08 95       	ret

00002000 <__gesf2>:
    2000:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__fp_cmp>
    2004:	08 f4       	brcc	.+2      	; 0x2008 <__gesf2+0x8>
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	08 95       	ret

0000200a <__mulsf3>:
    200a:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3x>
    200e:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__fp_round>
    2012:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__fp_pscA>
    2016:	38 f0       	brcs	.+14     	; 0x2026 <__mulsf3+0x1c>
    2018:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__fp_pscB>
    201c:	20 f0       	brcs	.+8      	; 0x2026 <__mulsf3+0x1c>
    201e:	95 23       	and	r25, r21
    2020:	11 f0       	breq	.+4      	; 0x2026 <__mulsf3+0x1c>
    2022:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__fp_inf>
    2026:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__fp_nan>
    202a:	11 24       	eor	r1, r1
    202c:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__fp_szero>

00002030 <__mulsf3x>:
    2030:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__fp_split3>
    2034:	70 f3       	brcs	.-36     	; 0x2012 <__mulsf3+0x8>

00002036 <__mulsf3_pse>:
    2036:	95 9f       	mul	r25, r21
    2038:	c1 f3       	breq	.-16     	; 0x202a <__mulsf3+0x20>
    203a:	95 0f       	add	r25, r21
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	55 1f       	adc	r21, r21
    2040:	62 9f       	mul	r22, r18
    2042:	f0 01       	movw	r30, r0
    2044:	72 9f       	mul	r23, r18
    2046:	bb 27       	eor	r27, r27
    2048:	f0 0d       	add	r31, r0
    204a:	b1 1d       	adc	r27, r1
    204c:	63 9f       	mul	r22, r19
    204e:	aa 27       	eor	r26, r26
    2050:	f0 0d       	add	r31, r0
    2052:	b1 1d       	adc	r27, r1
    2054:	aa 1f       	adc	r26, r26
    2056:	64 9f       	mul	r22, r20
    2058:	66 27       	eor	r22, r22
    205a:	b0 0d       	add	r27, r0
    205c:	a1 1d       	adc	r26, r1
    205e:	66 1f       	adc	r22, r22
    2060:	82 9f       	mul	r24, r18
    2062:	22 27       	eor	r18, r18
    2064:	b0 0d       	add	r27, r0
    2066:	a1 1d       	adc	r26, r1
    2068:	62 1f       	adc	r22, r18
    206a:	73 9f       	mul	r23, r19
    206c:	b0 0d       	add	r27, r0
    206e:	a1 1d       	adc	r26, r1
    2070:	62 1f       	adc	r22, r18
    2072:	83 9f       	mul	r24, r19
    2074:	a0 0d       	add	r26, r0
    2076:	61 1d       	adc	r22, r1
    2078:	22 1f       	adc	r18, r18
    207a:	74 9f       	mul	r23, r20
    207c:	33 27       	eor	r19, r19
    207e:	a0 0d       	add	r26, r0
    2080:	61 1d       	adc	r22, r1
    2082:	23 1f       	adc	r18, r19
    2084:	84 9f       	mul	r24, r20
    2086:	60 0d       	add	r22, r0
    2088:	21 1d       	adc	r18, r1
    208a:	82 2f       	mov	r24, r18
    208c:	76 2f       	mov	r23, r22
    208e:	6a 2f       	mov	r22, r26
    2090:	11 24       	eor	r1, r1
    2092:	9f 57       	subi	r25, 0x7F	; 127
    2094:	50 40       	sbci	r21, 0x00	; 0
    2096:	9a f0       	brmi	.+38     	; 0x20be <__mulsf3_pse+0x88>
    2098:	f1 f0       	breq	.+60     	; 0x20d6 <__mulsf3_pse+0xa0>
    209a:	88 23       	and	r24, r24
    209c:	4a f0       	brmi	.+18     	; 0x20b0 <__mulsf3_pse+0x7a>
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	bb 1f       	adc	r27, r27
    20a4:	66 1f       	adc	r22, r22
    20a6:	77 1f       	adc	r23, r23
    20a8:	88 1f       	adc	r24, r24
    20aa:	91 50       	subi	r25, 0x01	; 1
    20ac:	50 40       	sbci	r21, 0x00	; 0
    20ae:	a9 f7       	brne	.-22     	; 0x209a <__mulsf3_pse+0x64>
    20b0:	9e 3f       	cpi	r25, 0xFE	; 254
    20b2:	51 05       	cpc	r21, r1
    20b4:	80 f0       	brcs	.+32     	; 0x20d6 <__mulsf3_pse+0xa0>
    20b6:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__fp_inf>
    20ba:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__fp_szero>
    20be:	5f 3f       	cpi	r21, 0xFF	; 255
    20c0:	e4 f3       	brlt	.-8      	; 0x20ba <__mulsf3_pse+0x84>
    20c2:	98 3e       	cpi	r25, 0xE8	; 232
    20c4:	d4 f3       	brlt	.-12     	; 0x20ba <__mulsf3_pse+0x84>
    20c6:	86 95       	lsr	r24
    20c8:	77 95       	ror	r23
    20ca:	67 95       	ror	r22
    20cc:	b7 95       	ror	r27
    20ce:	f7 95       	ror	r31
    20d0:	e7 95       	ror	r30
    20d2:	9f 5f       	subi	r25, 0xFF	; 255
    20d4:	c1 f7       	brne	.-16     	; 0x20c6 <__mulsf3_pse+0x90>
    20d6:	fe 2b       	or	r31, r30
    20d8:	88 0f       	add	r24, r24
    20da:	91 1d       	adc	r25, r1
    20dc:	96 95       	lsr	r25
    20de:	87 95       	ror	r24
    20e0:	97 f9       	bld	r25, 7
    20e2:	08 95       	ret

000020e4 <_exit>:
    20e4:	f8 94       	cli

000020e6 <__stop_program>:
    20e6:	ff cf       	rjmp	.-2      	; 0x20e6 <__stop_program>


Interrupcao_externa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a4  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c1  00000000  00000000  00000ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006c7c  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  00007f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000806f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002780  00000000  00000000  00008087  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(INT0_vect) //interrupção externa INT0, quando o botão é pressionado o LED troca de estado
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
  94:	ef 93       	push	r30
  96:	ff 93       	push	r31
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= 0b00000100; //Inverte o estado do pino PC2
  a0:	88 e2       	ldi	r24, 0x28	; 40
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	28 e2       	ldi	r18, 0x28	; 40
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	30 81       	ld	r19, Z
  ac:	24 e0       	ldi	r18, 0x04	; 4
  ae:	23 27       	eor	r18, r19
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	ff 91       	pop	r31
  bc:	ef 91       	pop	r30
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	3f 91       	pop	r19
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <main>:

int main(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	1f 92       	push	r1
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
	//GPIO
	DDRD =0x00; //Todos os pinos da porta D como entradas
  dc:	8a e2       	ldi	r24, 0x2A	; 42
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	10 82       	st	Z, r1
	PORTD = 0xFF; //Todos os pull-ups da porta D habilitados
  e4:	8b e2       	ldi	r24, 0x2B	; 43
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
	DDRC =0b00000100; //somente pino do LED como saída PC2
  ee:	87 e2       	ldi	r24, 0x27	; 39
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	24 e0       	ldi	r18, 0x04	; 4
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18

	//Configuração das interrupções
	EICRA = 0b00000010;//interrupção externa INT0 na borda de descida
  f8:	89 e6       	ldi	r24, 0x69	; 105
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	22 e0       	ldi	r18, 0x02	; 2
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	EIMSK = 0b00000001;//habilita a interrupção externa INT0
 102:	8d e3       	ldi	r24, 0x3D	; 61
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	sei();//habilita interrupções globais, ativando o bit I do SREG
 10c:	78 94       	sei

	uint8_t cont = 0;
 10e:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{  
		cont++;
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	89 83       	std	Y+1, r24	; 0x01
	}
 116:	fc cf       	rjmp	.-8      	; 0x110 <main+0x3e>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
